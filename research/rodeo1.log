2018-02-28T14:19:20.319Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.334Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.335Z - info: node/index:: created new python kernel process cje7636uk01a23pn03fc7a63m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:20.338Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.339Z - info: node/index:: python kernel process error cje7636uk01a23pn03fc7a63m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:20.362Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:20.363Z - info: node/index:: python kernel process closed cje7636uk01a23pn03fc7a63m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:20.364Z - info: node/services/browser-windows:: ipc cje7636vn01a33pn082pdam3q: error completed 25ms
2018-02-28T14:19:20.387Z - info: node/services/browser-windows:: ipc cje7636wb01a53pn07hwfgokq: sharedAction completed 24ms
2018-02-28T14:19:20.388Z - info: node/services/browser-windows:: ipc cje7636wc01a63pn0817ah4y7: sharedAction completed 24ms
2018-02-28T14:19:20.389Z - info: node/services/browser-windows:: ipc cje7636w801a43pn047kb7p7s: error completed 29ms
2018-02-28T14:19:20.421Z - info: node/services/browser-windows:: ipc cje7636ww01a73pn0ps31kl3b: close completed 37ms
2018-02-28T14:19:20.425Z - info: node/services/browser-windows:: ipc cje7636x001a83pn0r5cwvcfx: sharedAction completed 37ms
2018-02-28T14:19:20.435Z - info: node/services/browser-windows:: ipc cje7636xx01a93pn0px4cljaj: sharedAction completed 14ms
2018-02-28T14:19:20.460Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:20.462Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.463Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.464Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.467Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.468Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.468Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.476Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.476Z - info: node/index:: created new python kernel process cje7636z001ab3pn0a7tjhd3d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:20.478Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.479Z - info: node/index:: python kernel process error cje7636z001ab3pn0a7tjhd3d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:20.491Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:20.491Z - info: node/index:: python kernel process closed cje7636z001ab3pn0a7tjhd3d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:20.493Z - info: node/services/browser-windows:: ipc cje7636yy01aa3pn0i4e4gksz: sharedAction completed 34ms
2018-02-28T14:19:20.500Z - info: node/services/browser-windows:: ipc cje7636zj01ac3pn0xkyom8r0: error completed 20ms
2018-02-28T14:19:20.516Z - info: node/services/browser-windows:: ipc cje7636zx01ae3pn0kc1502rz: sharedAction completed 22ms
2018-02-28T14:19:20.516Z - info: node/services/browser-windows:: ipc cje7636zs01ad3pn0xetmb25f: error completed 28ms
2018-02-28T14:19:20.527Z - info: node/services/browser-windows:: ipc cje76370e01ag3pn0l20idnwz: sharedAction completed 17ms
2018-02-28T14:19:20.527Z - info: node/services/browser-windows:: ipc cje76370g01ah3pn0cvjhqt9r: sharedAction completed 15ms
2018-02-28T14:19:20.529Z - info: node/services/browser-windows:: ipc cje76370e01af3pn0pzayzvx7: close completed 19ms
2018-02-28T14:19:20.549Z - info: node/services/browser-windows:: ipc cje76370u01ai3pn0n16c21nc: sharedAction completed 22ms
2018-02-28T14:19:20.576Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:20.577Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.579Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.580Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.581Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.582Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.583Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.596Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.597Z - info: node/index:: created new python kernel process cje76372801aj3pn0t6ewbbb5 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:20.599Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.599Z - info: node/index:: python kernel process error cje76372801aj3pn0t6ewbbb5 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:20.620Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:20.620Z - info: node/index:: python kernel process closed cje76372801aj3pn0t6ewbbb5 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:20.629Z - info: node/services/browser-windows:: ipc cje76372v01ak3pn0xtmmas13: error completed 30ms
2018-02-28T14:19:20.650Z - info: node/services/browser-windows:: ipc cje76373o01am3pn0wzowxr7v: sharedAction completed 22ms
2018-02-28T14:19:20.650Z - info: node/services/browser-windows:: ipc cje76373e01al3pn081uc0w72: error completed 32ms
2018-02-28T14:19:20.651Z - info: node/services/browser-windows:: ipc cje76373q01an3pn027vrsxty: sharedAction completed 20ms
2018-02-28T14:19:20.677Z - info: node/services/browser-windows:: ipc cje76374901ap3pn0u147t8ld: sharedAction completed 27ms
2018-02-28T14:19:20.677Z - info: node/services/browser-windows:: ipc cje76374501ao3pn0q1j2zxpc: close completed 32ms
2018-02-28T14:19:20.684Z - info: node/services/browser-windows:: ipc cje76374b01aq3pn0yw03d3jj: sharedAction completed 33ms
2018-02-28T14:19:20.708Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:20.708Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.709Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.709Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.710Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.712Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.717Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.728Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.728Z - info: node/index:: created new python kernel process cje76375w01ar3pn0piyamtu9 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:20.731Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.733Z - info: node/index:: python kernel process error cje76375w01ar3pn0piyamtu9 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:20.780Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:20.781Z - info: node/index:: python kernel process closed cje76375w01ar3pn0piyamtu9 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:20.787Z - info: node/services/browser-windows:: ipc cje76376l01as3pn0k6n075ar: error completed 54ms
2018-02-28T14:19:20.818Z - info: node/services/browser-windows:: ipc cje76378201au3pn0i3kdtmgf: sharedAction completed 32ms
2018-02-28T14:19:20.819Z - info: node/services/browser-windows:: ipc cje76378401av3pn0xd1szio6: sharedAction completed 30ms
2018-02-28T14:19:20.819Z - info: node/services/browser-windows:: ipc cje76377o01at3pn05og0i3c8: error completed 47ms
2018-02-28T14:19:20.835Z - info: node/services/browser-windows:: ipc cje76378w01aw3pn04vp65u3b: close completed 19ms
2018-02-28T14:19:20.836Z - info: node/services/browser-windows:: ipc cje76378x01ax3pn0li10smkh: sharedAction completed 19ms
2018-02-28T14:19:20.857Z - info: node/services/browser-windows:: ipc cje76379f01ay3pn0p53g53tk: sharedAction completed 22ms
2018-02-28T14:19:20.875Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:20.877Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.878Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.878Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.880Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.881Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:20.881Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:20.898Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.899Z - info: node/index:: created new python kernel process cje7637aj01az3pn0fjn867c4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:20.901Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:20.901Z - info: node/index:: python kernel process error cje7637aj01az3pn0fjn867c4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:20.937Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:20.938Z - info: node/index:: python kernel process closed cje7637aj01az3pn0fjn867c4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:20.939Z - info: node/services/browser-windows:: ipc cje7637b901b03pn0c10vocki: error completed 38ms
2018-02-28T14:19:20.959Z - info: node/services/browser-windows:: ipc cje7637ca01b23pn0gkjcot6k: sharedAction completed 21ms
2018-02-28T14:19:20.959Z - info: node/services/browser-windows:: ipc cje7637cb01b33pn0x2x1n2n8: sharedAction completed 20ms
2018-02-28T14:19:20.959Z - info: node/services/browser-windows:: ipc cje7637cc01b43pn0fqw81uqt: sharedAction completed 19ms
2018-02-28T14:19:20.959Z - info: node/services/browser-windows:: ipc cje7637c601b13pn09hrg8950: error completed 25ms
2018-02-28T14:19:20.968Z - info: node/services/browser-windows:: ipc cje7637cp01b53pn07eywgky4: close completed 15ms
2018-02-28T14:19:20.986Z - info: node/services/browser-windows:: ipc cje7637d401b63pn0zl403p7b: sharedAction completed 18ms
2018-02-28T14:19:21.005Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.006Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.007Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.008Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.010Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.010Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.011Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.024Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.025Z - info: node/index:: created new python kernel process cje7637e501b73pn07skoxpaw process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.027Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.028Z - info: node/index:: python kernel process error cje7637e501b73pn07skoxpaw process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.049Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.049Z - info: node/index:: python kernel process closed cje7637e501b73pn07skoxpaw process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.051Z - info: node/services/browser-windows:: ipc cje7637es01b83pn0byrx4ket: error completed 22ms
2018-02-28T14:19:21.063Z - info: node/services/browser-windows:: ipc cje7637fe01ba3pn0jlh4nhke: sharedAction completed 12ms
2018-02-28T14:19:21.064Z - info: node/services/browser-windows:: ipc cje7637fg01bb3pn0xr4tlf3x: sharedAction completed 11ms
2018-02-28T14:19:21.113Z - info: node/services/browser-windows:: ipc cje7637fs01bd3pn0b37hyq1m: sharedAction completed 48ms
2018-02-28T14:19:21.113Z - info: node/services/browser-windows:: ipc cje7637f901b93pn0xtjaqskd: error completed 68ms
2018-02-28T14:19:21.114Z - info: node/services/browser-windows:: ipc cje7637fq01bc3pn06xm43gmc: close completed 52ms
2018-02-28T14:19:21.131Z - info: node/services/browser-windows:: ipc cje7637h601be3pn0po0m3w50: sharedAction completed 16ms
2018-02-28T14:19:21.157Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.158Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.159Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.160Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.161Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.162Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.163Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.174Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.175Z - info: node/index:: created new python kernel process cje7637id01bf3pn0bdjpkcgi process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.181Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.182Z - info: node/index:: python kernel process error cje7637id01bf3pn0bdjpkcgi process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.211Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.211Z - info: node/index:: python kernel process closed cje7637id01bf3pn0bdjpkcgi process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.216Z - info: node/services/browser-windows:: ipc cje7637j201bg3pn05ex0ma9e: error completed 33ms
2018-02-28T14:19:21.222Z - info: node/services/browser-windows:: ipc cje7637jw01bi3pn088nsccuh: sharedAction completed 10ms
2018-02-28T14:19:21.241Z - info: node/services/browser-windows:: ipc cje7637kd01bk3pn0ykpbv96t: sharedAction completed 12ms
2018-02-28T14:19:21.280Z - info: node/services/browser-windows:: ipc cje7637kp01bl3pn0s48einqo: sharedAction completed 38ms
2018-02-28T14:19:21.280Z - info: node/services/browser-windows:: ipc cje7637jt01bh3pn03wvge59t: error completed 71ms
2018-02-28T14:19:21.281Z - info: node/services/browser-windows:: ipc cje7637k501bj3pn02qll65he: close completed 60ms
2018-02-28T14:19:21.318Z - info: node/services/browser-windows:: ipc cje7637ls01bm3pn079kirmjq: sharedAction completed 38ms
2018-02-28T14:19:21.343Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.345Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.347Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.349Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.354Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.356Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.356Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.370Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.371Z - info: node/index:: created new python kernel process cje7637nj01bn3pn0pras34kz process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.373Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.374Z - info: node/index:: python kernel process error cje7637nj01bn3pn0pras34kz process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.402Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.402Z - info: node/index:: python kernel process closed cje7637nj01bn3pn0pras34kz process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.417Z - info: node/services/browser-windows:: ipc cje7637oe01bo3pn0jgfym5l6: error completed 43ms
2018-02-28T14:19:21.488Z - info: node/services/browser-windows:: ipc cje7637pi01bq3pn0pkhcrb15: sharedAction completed 74ms
2018-02-28T14:19:21.488Z - info: node/services/browser-windows:: ipc cje7637pl01br3pn0t93bzzwo: sharedAction completed 71ms
2018-02-28T14:19:21.488Z - info: node/services/browser-windows:: ipc cje7637p401bp3pn0fqjne81r: error completed 88ms
2018-02-28T14:19:21.490Z - info: node/services/browser-windows:: ipc cje7637rb01bs3pn0oixwrhk9: close completed 11ms
2018-02-28T14:19:21.509Z - info: node/services/browser-windows:: ipc cje7637rh01bt3pn0wwvh184j: sharedAction completed 23ms
2018-02-28T14:19:21.510Z - info: node/services/browser-windows:: ipc cje7637rl01bu3pn0feythqlq: sharedAction completed 21ms
2018-02-28T14:19:21.515Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.522Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.523Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.524Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.525Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.526Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.526Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.555Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.556Z - info: node/index:: created new python kernel process cje7637sa01bv3pn05z63ixt4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.559Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.561Z - info: node/index:: python kernel process error cje7637sa01bv3pn05z63ixt4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.611Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.612Z - info: node/index:: python kernel process closed cje7637sa01bv3pn05z63ixt4 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.639Z - info: node/services/browser-windows:: ipc cje7637tl01bw3pn0gk4c1d5f: error completed 78ms
2018-02-28T14:19:21.645Z - info: node/services/browser-windows:: ipc cje7637u901bx3pn0397qd4h6: error completed 59ms
2018-02-28T14:19:21.659Z - info: node/services/browser-windows:: ipc cje7637vq01by3pn0hkdpvg5v: sharedAction completed 21ms
2018-02-28T14:19:21.659Z - info: node/services/browser-windows:: ipc cje7637vs01bz3pn0jbrn8p5t: sharedAction completed 19ms
2018-02-28T14:19:21.659Z - info: node/services/browser-windows:: ipc cje7637vs01c03pn0djkh6w9i: sharedAction completed 19ms
2018-02-28T14:19:21.675Z - info: node/services/browser-windows:: ipc cje7637wa01c13pn0jbn8d556: close completed 15ms
2018-02-28T14:19:21.685Z - info: node/services/browser-windows:: ipc cje7637wp01c23pn0f12nlmqs: sharedAction completed 12ms
2018-02-28T14:19:21.702Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.703Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.704Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.704Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.706Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.707Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.707Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.719Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.719Z - info: node/index:: created new python kernel process cje7637xi01c33pn0t6dx6npg process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.721Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.722Z - info: node/index:: python kernel process error cje7637xi01c33pn0t6dx6npg process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.774Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.777Z - info: node/index:: python kernel process closed cje7637xi01c33pn0t6dx6npg process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.778Z - info: node/services/browser-windows:: ipc cje7637y201c43pn0whxmgplv: error completed 53ms
2018-02-28T14:19:21.781Z - info: node/services/browser-windows:: ipc cje7637z101c53pn0m9y0twpb: error completed 24ms
2018-02-28T14:19:21.799Z - info: node/services/browser-windows:: ipc cje7637zl01c63pn0axxpqy79: sharedAction completed 22ms
2018-02-28T14:19:21.799Z - info: node/services/browser-windows:: ipc cje7637zn01c73pn05vxzlg7h: sharedAction completed 20ms
2018-02-28T14:19:21.805Z - info: node/services/browser-windows:: ipc cje7637zp01c83pn04kuxcu6l: sharedAction completed 24ms
2018-02-28T14:19:21.806Z - info: node/services/browser-windows:: ipc cje7637zy01c93pn0bnasil4y: close completed 16ms
2018-02-28T14:19:21.820Z - info: node/services/browser-windows:: ipc cje76380d01ca3pn0autd8q2n: sharedAction completed 15ms
2018-02-28T14:19:21.864Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:21.865Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.866Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.866Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.872Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.874Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:21.876Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:21.893Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.894Z - info: node/index:: created new python kernel process cje76382001cb3pn0kygmedt1 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:21.898Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:21.899Z - info: node/index:: python kernel process error cje76382001cb3pn0kygmedt1 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:21.938Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:21.944Z - info: node/index:: python kernel process closed cje76382001cb3pn0kygmedt1 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:21.954Z - info: node/services/browser-windows:: ipc cje76382z01cc3pn0d7cur4kh: error completed 55ms
2018-02-28T14:19:21.992Z - info: node/services/browser-windows:: ipc cje76384e01ce3pn01ngko44u: sharedAction completed 40ms
2018-02-28T14:19:21.992Z - info: node/services/browser-windows:: ipc cje76384j01cf3pn05oju09dg: sharedAction completed 37ms
2018-02-28T14:19:22.009Z - info: node/services/browser-windows:: ipc cje76383o01cd3pn0fz1ofxrk: error completed 85ms
2018-02-28T14:19:22.010Z - info: node/services/browser-windows:: ipc cje76385b01cg3pn043slu8r9: close completed 27ms
2018-02-28T14:19:22.020Z - info: node/services/browser-windows:: ipc cje76386001ch3pn018ld9pjf: sharedAction completed 12ms
2018-02-28T14:19:22.020Z - info: node/services/browser-windows:: ipc cje76386101ci3pn0ipbc2huj: sharedAction completed 11ms
2018-02-28T14:19:22.028Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.030Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.031Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.032Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.035Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.036Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.036Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.046Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.047Z - info: node/index:: created new python kernel process cje76386k01cj3pn05a2rpqtt process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.050Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.050Z - info: node/index:: python kernel process error cje76386k01cj3pn05a2rpqtt process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.076Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.076Z - info: node/index:: python kernel process closed cje76386k01cj3pn05a2rpqtt process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.078Z - info: node/services/browser-windows:: ipc cje76387601ck3pn0d3bwdd1y: error completed 28ms
2018-02-28T14:19:22.083Z - info: node/services/browser-windows:: ipc cje76387e01cl3pn027605owc: error completed 25ms
2018-02-28T14:19:22.093Z - info: node/services/browser-windows:: ipc cje76387y01cm3pn0qjsf01oq: sharedAction completed 14ms
2018-02-28T14:19:22.093Z - info: node/services/browser-windows:: ipc cje76388101cn3pn0ix81fijm: sharedAction completed 11ms
2018-02-28T14:19:22.093Z - info: node/services/browser-windows:: ipc cje76388201co3pn0396y6h0s: sharedAction completed 11ms
2018-02-28T14:19:22.104Z - info: node/services/browser-windows:: ipc cje76388c01cp3pn0ly1geqq6: close completed 12ms
2018-02-28T14:19:22.117Z - info: node/services/browser-windows:: ipc cje76388o01cq3pn0q6s886pu: sharedAction completed 13ms
2018-02-28T14:19:22.134Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.135Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.135Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.136Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.136Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.137Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.137Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.145Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.146Z - info: node/index:: created new python kernel process cje76389i01cr3pn0q928fwrk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.148Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.149Z - info: node/index:: python kernel process error cje76389i01cr3pn0q928fwrk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.157Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.157Z - info: node/index:: python kernel process closed cje76389i01cr3pn0q928fwrk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.160Z - info: node/services/browser-windows:: ipc cje76389x01cs3pn083014u9t: error completed 11ms
2018-02-28T14:19:22.169Z - info: node/services/browser-windows:: ipc cje7638a701cu3pn0ogwsx6we: sharedAction completed 9ms
2018-02-28T14:19:22.169Z - info: node/services/browser-windows:: ipc cje7638a801cv3pn0ahhpiioj: sharedAction completed 9ms
2018-02-28T14:19:22.170Z - info: node/services/browser-windows:: ipc cje7638a301ct3pn0zdef6w0j: error completed 14ms
2018-02-28T14:19:22.175Z - info: node/services/browser-windows:: ipc cje7638ah01cx3pn0o2i4oyi0: sharedAction completed 6ms
2018-02-28T14:19:22.176Z - info: node/services/browser-windows:: ipc cje7638ag01cw3pn01f8h8er0: close completed 8ms
2018-02-28T14:19:22.211Z - info: node/services/browser-windows:: ipc cje7638an01cy3pn083f3of9a: sharedAction completed 36ms
2018-02-28T14:19:22.238Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.239Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.240Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.241Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.250Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.250Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.251Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.263Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.264Z - info: node/index:: created new python kernel process cje7638ce01d13pn0lljq8whk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.268Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.268Z - info: node/index:: python kernel process error cje7638ce01d13pn0lljq8whk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.294Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.294Z - info: node/index:: python kernel process closed cje7638ce01d13pn0lljq8whk process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.300Z - info: node/services/browser-windows:: ipc cje7638d901d23pn0g2zidyi5: error completed 27ms
2018-02-28T14:19:22.325Z - info: node/services/browser-windows:: ipc cje7638dz01d43pn0lsri6n7p: sharedAction completed 30ms
2018-02-28T14:19:22.325Z - info: node/services/browser-windows:: ipc cje7638e401d53pn0xir4nwut: sharedAction completed 25ms
2018-02-28T14:19:22.325Z - info: node/services/browser-windows:: ipc cje7638e401d63pn00ckgyac3: sharedAction completed 25ms
2018-02-28T14:19:22.355Z - info: node/services/browser-windows:: ipc cje7638dt01d33pn069l5qd4r: error completed 66ms
2018-02-28T14:19:22.370Z - info: node/services/browser-windows:: ipc cje7638et01d73pn0yfn6khav: close completed 44ms
2018-02-28T14:19:22.371Z - info: node/services/browser-windows:: ipc cje7638fo01d83pn0xrkrmfwr: sharedAction completed 15ms
2018-02-28T14:19:22.428Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.430Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.431Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.432Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.434Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.435Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.436Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.459Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.459Z - info: node/index:: created new python kernel process cje7638hn01d93pn0n0wzzrtn process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.463Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.464Z - info: node/index:: python kernel process error cje7638hn01d93pn0n0wzzrtn process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.491Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.492Z - info: node/index:: python kernel process closed cje7638hn01d93pn0n0wzzrtn process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.493Z - info: node/services/browser-windows:: ipc cje7638io01da3pn0g5har6wx: error completed 29ms
2018-02-28T14:19:22.495Z - info: node/services/browser-windows:: ipc cje7638j401db3pn0exajiy0m: error completed 15ms
2018-02-28T14:19:22.504Z - info: node/services/browser-windows:: ipc cje7638jh01dc3pn0i7s1uwv3: sharedAction completed 11ms
2018-02-28T14:19:22.505Z - info: node/services/browser-windows:: ipc cje7638ji01dd3pn0dqxxz18e: sharedAction completed 11ms
2018-02-28T14:19:22.506Z - info: node/services/browser-windows:: ipc cje7638jj01de3pn0nmwb9yxd: sharedAction completed 11ms
2018-02-28T14:19:22.540Z - info: node/services/browser-windows:: ipc cje7638jr01df3pn0altre1ye: close completed 36ms
2018-02-28T14:19:22.554Z - info: node/services/browser-windows:: ipc cje7638kr01dg3pn0qa5j7zx3: sharedAction completed 15ms
2018-02-28T14:19:22.572Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.573Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.574Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.575Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.576Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.582Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.583Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.593Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.594Z - info: node/index:: created new python kernel process cje7638ln01dh3pn0dbaafo9d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.614Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.615Z - info: node/index:: python kernel process error cje7638ln01dh3pn0dbaafo9d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.642Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.643Z - info: node/index:: python kernel process closed cje7638ln01dh3pn0dbaafo9d process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.645Z - info: node/services/browser-windows:: ipc cje7638mv01di3pn01t8rnpkb: error completed 29ms
2018-02-28T14:19:22.694Z - info: node/services/browser-windows:: ipc cje7638nn01dk3pn0o8o37lwa: sharedAction completed 51ms
2018-02-28T14:19:22.694Z - info: node/services/browser-windows:: ipc cje7638nj01dj3pn0zn50hzrf: error completed 55ms
2018-02-28T14:19:22.695Z - info: node/services/browser-windows:: ipc cje7638nt01dl3pn0qix7pctf: sharedAction completed 45ms
2018-02-28T14:19:22.695Z - info: node/services/browser-windows:: ipc cje7638nu01dm3pn0ou17qpi8: sharedAction completed 45ms
2018-02-28T14:19:22.698Z - info: node/services/browser-windows:: ipc cje7638oy01dn3pn09kmqldag: close completed 7ms
2018-02-28T14:19:22.716Z - info: node/services/browser-windows:: ipc cje7638p501do3pn03hxnxhov: sharedAction completed 19ms
2018-02-28T14:19:22.750Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.751Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.751Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.752Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.753Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.754Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.755Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.782Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.782Z - info: node/index:: created new python kernel process cje7638qm01dp3pn00mqe0kji process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.784Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.785Z - info: node/index:: python kernel process error cje7638qm01dp3pn00mqe0kji process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.828Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.828Z - info: node/index:: python kernel process closed cje7638qm01dp3pn00mqe0kji process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.831Z - info: node/services/browser-windows:: ipc cje7638rl01dq3pn00i62w643: error completed 46ms
2018-02-28T14:19:22.834Z - info: node/services/browser-windows:: ipc cje7638ru01dr3pn0w2g9bscw: error completed 40ms
2018-02-28T14:19:22.849Z - info: node/services/browser-windows:: ipc cje7638sv01ds3pn093nwlfd7: sharedAction completed 18ms
2018-02-28T14:19:22.849Z - info: node/services/browser-windows:: ipc cje7638sw01dt3pn0wyc746te: sharedAction completed 17ms
2018-02-28T14:19:22.849Z - info: node/services/browser-windows:: ipc cje7638sx01du3pn0567qkk46: sharedAction completed 16ms
2018-02-28T14:19:22.865Z - info: node/services/browser-windows:: ipc cje7638td01dv3pn0jm1vhmn0: close completed 16ms
2018-02-28T14:19:22.880Z - info: node/services/browser-windows:: ipc cje7638tr01dw3pn0t24nhb78: sharedAction completed 13ms
2018-02-28T14:19:22.892Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:22.894Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.895Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.896Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.897Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.898Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:22.899Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:22.914Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.914Z - info: node/index:: created new python kernel process cje7638uk01dx3pn043as3l9m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:22.916Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:22.917Z - info: node/index:: python kernel process error cje7638uk01dx3pn043as3l9m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:22.949Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:22.949Z - info: node/index:: python kernel process closed cje7638uk01dx3pn043as3l9m process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:22.955Z - info: node/services/browser-windows:: ipc cje7638v901dy3pn08z3qxvic: error completed 37ms
2018-02-28T14:19:22.993Z - info: node/services/browser-windows:: ipc cje7638w901e03pn0hxx64ape: sharedAction completed 40ms
2018-02-28T14:19:22.993Z - info: node/services/browser-windows:: ipc cje7638wb01e13pn0e5pzoqcw: sharedAction completed 38ms
2018-02-28T14:19:22.993Z - info: node/services/browser-windows:: ipc cje7638w201dz3pn05x9c2lk3: error completed 47ms
2018-02-28T14:19:23.005Z - info: node/services/browser-windows:: ipc cje7638xc01e33pn047vtc4b4: sharedAction completed 13ms
2018-02-28T14:19:23.009Z - info: node/services/browser-windows:: ipc cje7638xc01e23pn0q6jmas8f: close completed 17ms
