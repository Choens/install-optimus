2018-02-28T14:19:23.025Z - info: node/services/browser-windows:: ipc cje7638xr01e43pn03kyf5ozf: sharedAction completed 18ms
2018-02-28T14:19:23.065Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.066Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.067Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.068Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.069Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.070Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.071Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.090Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.090Z - info: node/index:: created new python kernel process cje7638za01e53pn0qtwxsn47 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.093Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.093Z - info: node/index:: python kernel process error cje7638za01e53pn0qtwxsn47 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.113Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.114Z - info: node/index:: python kernel process closed cje7638za01e53pn0qtwxsn47 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.117Z - info: node/services/browser-windows:: ipc cje76390601e63pn0ja55q3en: error completed 23ms
2018-02-28T14:19:23.135Z - info: node/services/browser-windows:: ipc cje76390s01e83pn00f60aaha: sharedAction completed 18ms
2018-02-28T14:19:23.135Z - info: node/services/browser-windows:: ipc cje76390t01e93pn0n6dxytng: sharedAction completed 18ms
2018-02-28T14:19:23.135Z - info: node/services/browser-windows:: ipc cje76390u01ea3pn0asnoud8i: sharedAction completed 17ms
2018-02-28T14:19:23.135Z - info: node/services/browser-windows:: ipc cje76390k01e73pn0k38js6hy: error completed 27ms
2018-02-28T14:19:23.182Z - info: node/services/browser-windows:: ipc cje76391501eb3pn0o5iqdu6b: close completed 53ms
2018-02-28T14:19:23.242Z - info: node/services/browser-windows:: ipc cje76392m01ec3pn06wvlgdtu: sharedAction completed 59ms
2018-02-28T14:19:23.244Z - info: node/services/browser-windows:: ipc cje76392r01ed3pn0qhp1zbyq: sharedAction completed 56ms
2018-02-28T14:19:23.261Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.264Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.267Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.269Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.274Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.275Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.277Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.302Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.302Z - info: node/index:: created new python kernel process cje76394s01ee3pn0jfhvxac2 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.305Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.306Z - info: node/index:: python kernel process error cje76394s01ee3pn0jfhvxac2 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.327Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.328Z - info: node/index:: python kernel process closed cje76394s01ee3pn0jfhvxac2 process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.329Z - info: node/services/browser-windows:: ipc cje76396201ef3pn0kthe7ra6: error completed 23ms
2018-02-28T14:19:23.342Z - info: node/services/browser-windows:: ipc cje76396p01eh3pn0eixxwupp: sharedAction completed 13ms
2018-02-28T14:19:23.343Z - info: node/services/browser-windows:: ipc cje76396q01ei3pn0kjmcq23i: sharedAction completed 12ms
2018-02-28T14:19:23.351Z - info: node/services/browser-windows:: ipc cje76396k01eg3pn09e2ksnig: error completed 26ms
2018-02-28T14:19:23.368Z - info: node/services/browser-windows:: ipc cje76397301ek3pn0jg5dbjsi: sharedAction completed 25ms
2018-02-28T14:19:23.369Z - info: node/services/browser-windows:: ipc cje76397201ej3pn0imii6dzy: close completed 27ms
2018-02-28T14:19:23.409Z - info: node/services/browser-windows:: ipc cje76397t01el3pn0pql21jm2: sharedAction completed 39ms
2018-02-28T14:19:23.409Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.410Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.411Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.412Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.413Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.414Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.415Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.424Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.424Z - info: node/index:: created new python kernel process cje76398x01en3pn0o3m5thuu process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.426Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.427Z - info: node/index:: python kernel process error cje76398x01en3pn0o3m5thuu process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.448Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.449Z - info: node/index:: python kernel process closed cje76398x01en3pn0o3m5thuu process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.451Z - info: node/services/browser-windows:: ipc cje76399f01eo3pn0m83zs95e: error completed 23ms
2018-02-28T14:19:23.471Z - info: node/services/browser-windows:: ipc cje7639a201eq3pn0bewp5j03: sharedAction completed 20ms
2018-02-28T14:19:23.472Z - info: node/services/browser-windows:: ipc cje7639a301er3pn0qn75458v: sharedAction completed 21ms
2018-02-28T14:19:23.472Z - info: node/services/browser-windows:: ipc cje76399w01ep3pn02o02beln: error completed 28ms
2018-02-28T14:19:23.488Z - info: node/services/browser-windows:: ipc cje7639an01et3pn0c5bb1z3z: sharedAction completed 16ms
2018-02-28T14:19:23.490Z - info: node/services/browser-windows:: ipc cje7639al01es3pn0ikgr0pi0: close completed 21ms
2018-02-28T14:19:23.512Z - info: node/services/browser-windows:: ipc cje7639b201eu3pn0y4g5163j: sharedAction completed 26ms
2018-02-28T14:19:23.529Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.531Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.534Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.536Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.567Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.570Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.572Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.595Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.596Z - info: node/index:: created new python kernel process cje7639c901ev3pn01aeber7t process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.598Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.599Z - info: node/index:: python kernel process error cje7639c901ev3pn01aeber7t process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.683Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.684Z - info: node/index:: python kernel process closed cje7639c901ev3pn01aeber7t process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.686Z - info: node/services/browser-windows:: ipc cje7639e701ew3pn07ur1dei9: error completed 86ms
2018-02-28T14:19:23.687Z - warn: node/services/browser-windows:: ipc cje762q3s00073pn0xbqpgklw: still waiting for sharedAction
2018-02-28T14:19:23.734Z - info: node/services/browser-windows:: ipc cje7639gl01ey3pn08jnyym35: sharedAction completed 48ms
2018-02-28T14:19:23.734Z - info: node/services/browser-windows:: ipc cje7639gm01ez3pn0z3uddvsk: sharedAction completed 48ms
2018-02-28T14:19:23.734Z - info: node/services/browser-windows:: ipc cje7639gm01f03pn0fvwstoly: sharedAction completed 48ms
2018-02-28T14:19:23.734Z - info: node/services/browser-windows:: ipc cje7639gf01ex3pn0559myyvs: error completed 55ms
2018-02-28T14:19:23.735Z - warn: node/services/browser-windows:: ipc cje762q5o00093pn0qu5cbyrm: still waiting for sharedAction
2018-02-28T14:19:23.735Z - warn: node/services/browser-windows:: ipc cje762q5p000a3pn0tmzjpqpv: still waiting for sharedAction
2018-02-28T14:19:23.755Z - info: node/services/browser-windows:: ipc cje7639hx01f13pn0heorpp8i: close completed 21ms
2018-02-28T14:19:23.767Z - info: node/services/browser-windows:: ipc cje7639ii01f23pn0ppqbbhm3: sharedAction completed 12ms
2018-02-28T14:19:23.784Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.785Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.786Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.787Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.788Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.789Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.790Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.832Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.833Z - info: node/index:: created new python kernel process cje7639jc01f33pn0r7u4a8xy process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.835Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.837Z - info: node/index:: python kernel process error cje7639jc01f33pn0r7u4a8xy process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.839Z - warn: node/services/browser-windows:: ipc cje762q96000e3pn06y93rkfp: still waiting for sharedAction
2018-02-28T14:19:23.839Z - warn: node/services/browser-windows:: ipc cje762q9d000f3pn0dechvwk5: still waiting for sharedAction
2018-02-28T14:19:23.839Z - warn: node/services/browser-windows:: ipc cje762q9d000g3pn0if4qll41: still waiting for sharedAction
2018-02-28T14:19:23.847Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.848Z - info: node/index:: python kernel process closed cje7639jc01f33pn0r7u4a8xy process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.849Z - info: node/services/processes:: removed child process { pid: 12274,
  code: 0,
  signal: null,
  errors: {},
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-28T14:19:23.851Z - info: node/services/browser-windows:: ipc cje7639kt01f43pn07gv5lcqo: error completed 13ms
2018-02-28T14:19:23.863Z - info: node/services/browser-windows:: ipc cje7639l601f63pn07p38hua7: sharedAction completed 13ms
2018-02-28T14:19:23.864Z - info: node/services/browser-windows:: ipc cje7639l701f73pn0i43ezvm1: sharedAction completed 13ms
2018-02-28T14:19:23.864Z - info: node/services/browser-windows:: ipc cje7639l101f53pn0i1fxazit: error completed 19ms
2018-02-28T14:19:23.874Z - info: node/services/browser-windows:: ipc cje7639lh01f83pn0jvcejqeo: close completed 13ms
2018-02-28T14:19:23.876Z - warn: node/services/browser-windows:: ipc cje762qah000i3pn0s0ra2efh: still waiting for sharedAction
2018-02-28T14:19:23.891Z - info: node/services/browser-windows:: close startupWindow
2018-02-28T14:19:23.893Z - info: node/services/browser-windows:: ipc cje7639lw01fb3pn0qzhm0n6f: sharedAction completed 16ms
2018-02-28T14:19:23.893Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.896Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python3',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.897Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.898Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.899Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.902Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.914Z - info: node/services/processes:: added child process { pid: 12368,
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.915Z - info: node/index:: created new python kernel process cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-02-28T14:19:23.916Z - info: node/services/browser-windows:: ipc cje7639lj01f93pn0mxx80o68: sharedAction completed 53ms
2018-02-28T14:19:23.917Z - info: node/services/browser-windows:: ipc cje7639lk01fa3pn0a41k8ktf: sharedAction completed 53ms
2018-02-28T14:19:23.925Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:19:23.926Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.927Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: '<rodeo-builtin-miniconda>',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.927Z - info: node/kernels/python/language:: setBuiltinDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.930Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.931Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: '/opt/Rodeo/resources/conda/python.exe',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:19:23.932Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:19:23.945Z - info: node/services/processes:: added child process { pid: undefined,
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.946Z - info: node/index:: created new python kernel process cje7639n901fd3pn0luze8vur process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' }
2018-02-28T14:19:23.948Z - info: node/services/processes:: error in child process { pid: undefined,
  error: '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }',
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-28T14:19:23.948Z - info: node/index:: python kernel process error cje7639n901fd3pn0luze8vur process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }'
2018-02-28T14:19:23.987Z - info: node/services/processes:: removed child process { pid: undefined,
  code: -2,
  signal: null,
  errors: { '0': '{ stack: \'Error: spawn /opt/Rodeo/resources/conda/python.exe ENOENT\\n    at exports._errnoException (util.js:1026:11)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\\n    at onErrorNT (internal/child_process.js:359:16)\\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\\n    at process._tickCallback (internal/process/next_tick.js:98:9)\',\n  message: \'spawn /opt/Rodeo/resources/conda/python.exe ENOENT\',\n  code: \'ENOENT\',\n  errno: \'ENOENT\',\n  syscall: \'spawn /opt/Rodeo/resources/conda/python.exe\',\n  path: \'/opt/Rodeo/resources/conda/python.exe\',\n  spawnargs: \n   [ \'-c\',\n     \'import os\\nimport sys\\nimport json\\nimport pprint as pp\\nimport threading\\nfrom datetime import datetime\\nfrom collections import OrderedDict\\n\\n# start compatibility with IPython Jupyter 4.0\\ntry:\\n    from jupyter_client import manager\\nexcept ImportError:\\n    try:\\n        from IPython.kernel import manager\\n    except ImportError:\\n        raise Exception(\\\'Jupyter is not installed\\\')\\n\\ntry:\\n    import pip\\nexcept:\\n    raise Exception(\\\'Pip is not installed\\\')\\n\\ntry:\\n    import numpy\\nexcept:\\n    raise Exception(\\\'Numpy is not installed\\\')\\n\\ntry:\\n    import pandas\\nexcept:\\n    raise Exception(\\\'Pandas is not installed\\\')\\n\\ntry:\\n    import matplotlib\\nexcept:\\n    raise Exception(\\\'Matplotlib is not installed\\\')\\n\\n# python3/python2 nonsense\\ntry:\\n    from Queue import Empty\\n    import Queue\\nexcept:\\n    from queue import Empty\\n    import queue as Queue\\n\\ndef json_serial(obj):\\n    """JSON serializer for objects not serializable by default json code"""\\n\\n    if isinstance(obj, datetime):\\n        serial = obj.isoformat()\\n        return serial\\n    raise TypeError ("Type not serializable")\\n\\ndef add_input(input_queue):\\n    while True:\\n        input_queue.put(sys.stdin.readline())\\n\\ndef kernel(wd=None, verbose=0):\\n    # setup ipython kernel and configure it\\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\\\'inline\\\'"])\\n    current_timeout_min = 0.0005\\n    current_timeout_max = 0.01\\n    current_timeout = current_timeout_max\\n\\n    acceptable_types = [\\n      "execute_input",\\n      "stream",\\n      "display_data",\\n      "error",\\n      "execute_result",\\n      "execute_reply",\\n      "complete_reply"\\n    ]\\n\\n    input_queue = Queue.Queue()\\n\\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\\n    input_thread.daemon = True\\n    input_thread.start()\\n\\n    # we\\\'re up and running!\\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\\\n")\\n\\n    should_continue = True\\n    while should_continue:\\n        if not input_queue.empty():\\n            current_timeout = current_timeout_min\\n            line = input_queue.get().strip()\\n            payload = json.loads(line)\\n            uid = payload["id"]\\n            args = payload.get("args", [])\\n            kwargs = payload.get("kwargs", {})\\n            method = payload.get("method", False)\\n            target_str = payload.get("target", "client")\\n            exec_eval = payload.get("exec_eval", False)\\n\\n            if target_str == "manager":\\n              target = kernel_manager\\n            else:\\n              target = kernel_client\\n\\n            if method:\\n                if getattr(target, method, False):\\n                    result = getattr(target, method)(*args, **kwargs)\\n                    if result:\\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n                else:\\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \\\'\\\\n\\\')\\n\\n            if exec_eval:\\n                result = eval(exec_eval)\\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \\\'\\\\n\\\')\\n\\n        try:\\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\\n\\n            content = data.get(\\\'content\\\', False)\\n\\n            if content:\\n                payload = content.get(\\\'payload\\\', False)\\n                if payload:\\n                    try:\\n                        first = payload[0]\\n                        if first:\\n                            source = first.get(\\\'source\\\', False)\\n                            keepkernel = first.get(\\\'keepkernel\\\', False)\\n                            if source == \\\'ask_exit\\\' and keepkernel == False:\\n                                should_continue = False\\n                    except IndexError:\\n                        pass\\n                msg_type = data.get(\\\'msg_type\\\', False)\\n                if msg_type == \\\'shutdown_reply\\\':\\n                    shutdown_restart = content.get(\\\'restart\\\', False)\\n                    if not shutdown_restart:\\n                        should_continue = False\\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \\\'\\\\n\\\')\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            while True:\\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n                sys.stdout.flush()\\n                current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        try:\\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \\\'\\\\n\\\')\\n            sys.stdout.flush()\\n            current_timeout = current_timeout_min\\n        except Empty:\\n            pass\\n\\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\\n\\nif __name__=="__main__":\\n    wd = None\\n    if len(sys.argv) > 1:\\n        wd = sys.argv[1]\\n    kernel(wd, verbose=2)\\n\',\n     \'python3\' ] }' },
  cmd: '/opt/Rodeo/resources/conda/python.exe',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/opt/Rodeo/resources/conda:/opt/Rodeo/resources/conda/Lib:/opt/Rodeo/resources/conda/Scripts:/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:19:23.987Z - info: node/index:: python kernel process closed cje7639n901fd3pn0luze8vur process undefined { cmd: '<rodeo-builtin-miniconda>',
  cwd: '~',
  kernelName: 'python3' } { code: -2, signal: null }
2018-02-28T14:19:23.988Z - info: node/index:: deleted python kernel process reference cje7639md01fc3pn0ye38qau4
2018-02-28T14:19:23.989Z - info: node/services/browser-windows:: ipc cje7639nx01fe3pn0in4simy3: error completed 40ms
2018-02-28T14:19:24.004Z - info: node/services/browser-windows:: destroyed
2018-02-28T14:19:24.008Z - info: node/services/browser-windows:: closed startupWindow
2018-02-28T14:19:24.019Z - info: node/services/browser-windows:: ipc cje7639od01ff3pn0ggcxicik: error completed 54ms
2018-02-28T14:19:24.050Z - info: node/services/browser-windows:: ipc cje7639qg01fh3pn0uybnjtxd: close completed 9ms
2018-02-28T14:19:24.685Z - info: node/index:: python kernel process event cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-02-28T14:19:25.739Z - info: node/index:: python kernel process event cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-02-28T14:19:26.982Z - info: node/index:: new python kernel process is ready cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-02-28T14:19:27.777Z - info: node/index:: python kernel process event cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-28T14:19:27.790Z - info: node/services/processes:: removed child process { pid: 12368,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-28T14:19:27.790Z - info: node/index:: python kernel process closed cje7639md01fc3pn0ye38qau4 process 12368 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-28T14:19:27.794Z - info: node/index:: successfully killed python kernel process reference cje7639md01fc3pn0ye38qau4
2018-02-28T14:19:27.794Z - info: node/services/ipc-promises:: did not reply to event because sender is destroyed 7 killKernelInstance
2018-02-28T14:19:27.797Z - info: node/services/browser-windows:: ipc cje763cmo01fj3pn0i6m5a0cr: close completed 5ms
2018-02-28T14:19:28.689Z - info: node/services/browser-windows:: ipc cje762q3s00073pn0xbqpgklw: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.738Z - info: node/services/browser-windows:: ipc cje762q5o00093pn0qu5cbyrm: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.738Z - info: node/services/browser-windows:: ipc cje762q5p000a3pn0tmzjpqpv: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.838Z - info: node/services/browser-windows:: ipc cje762q96000e3pn06y93rkfp: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.839Z - info: node/services/browser-windows:: ipc cje762q9d000f3pn0dechvwk5: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.839Z - info: node/services/browser-windows:: ipc cje762q9d000g3pn0if4qll41: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.876Z - info: node/services/browser-windows:: ipc cje762qah000i3pn0s0ra2efh: will never complete because target window is gone sharedAction
2018-02-28T14:19:28.989Z - info: node/services/browser-windows:: ipc cje7639p001fg3pn02cab4v4h: will never complete because target window is gone sharedAction
2018-02-28T14:20:05.954Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje76462l01fk3pn0bn4bkjh5',
  '2': { type: 'ADD_FILE' },
  '3': 'mainWindow' }
2018-02-28T14:20:42.043Z - info: node/index:: creating new python kernel process creating python client
2018-02-28T14:20:42.047Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python3',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:20:42.049Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:20:42.051Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:20:42.052Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:35485',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-02-28T14:20:42.054Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:35485',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-02-28T14:20:42.069Z - info: node/services/processes:: added child process { pid: 12450,
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-28T14:20:42.070Z - info: node/index:: created new python kernel process cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-02-28T14:20:42.682Z - info: node/index:: python kernel process event cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-02-28T14:20:43.462Z - info: node/index:: python kernel process event cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-02-28T14:20:44.372Z - info: node/index:: new python kernel process is ready cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-02-28T14:20:47.112Z - info: node/services/browser-windows:: ipc cje7651tr01fo3pn0y14s13qd: getTabs completed 8ms
2018-02-28T14:20:47.197Z - info: node/services/browser-windows:: ipc cje7651vz01fq3pn0g54abdyt: jupyter completed 13ms
2018-02-28T14:20:47.211Z - info: node/services/browser-windows:: ipc cje7651w101fr3pn08u4gjr1x: jupyter completed 26ms
2018-02-28T14:20:47.229Z - info: node/services/browser-windows:: ipc cje7651w101fs3pn05xg0ypa1: jupyter completed 44ms
2018-02-28T14:20:47.242Z - info: node/services/browser-windows:: ipc cje7651w201ft3pn0wspuccpr: jupyter completed 56ms
2018-02-28T14:20:47.254Z - info: node/services/browser-windows:: ipc cje7651w201fu3pn0k5v7ta34: jupyter completed 68ms
2018-02-28T14:20:57.503Z - info: node/services/browser-windows:: ipc cje7659ug01fx3pn0r3n1uufr: getTabs completed 7ms
2018-02-28T14:20:57.558Z - info: node/services/browser-windows:: ipc cje7659vh01fz3pn04zttnrrm: jupyter completed 19ms
2018-02-28T14:20:57.559Z - info: node/services/browser-windows:: ipc cje7659vh01g03pn0kmwx6yb9: jupyter completed 26ms
2018-02-28T14:20:57.577Z - info: node/services/browser-windows:: ipc cje7659vh01g13pn0dk13zaew: jupyter completed 43ms
2018-02-28T14:20:57.579Z - info: node/services/browser-windows:: ipc cje7659vj01g23pn09irl8nfv: jupyter completed 42ms
2018-02-28T14:20:58.000Z - info: node/services/browser-windows:: ipc cje765a8801g43pn0e3qwzw5k: getTabs completed 8ms
2018-02-28T14:20:58.047Z - info: node/services/browser-windows:: ipc cje765a9k01g63pn0s7evyu00: jupyter completed 7ms
2018-02-28T14:20:58.056Z - info: node/services/browser-windows:: ipc cje765a9k01g73pn0nlct33wq: jupyter completed 15ms
2018-02-28T14:20:58.061Z - info: node/services/browser-windows:: ipc cje765a9l01g83pn084ibq8za: jupyter completed 20ms
2018-02-28T14:20:58.071Z - info: node/services/browser-windows:: ipc cje765a9l01g93pn0waelh9dh: jupyter completed 30ms
2018-02-28T14:20:58.081Z - info: node/services/browser-windows:: ipc cje765a9l01ga3pn0iofeenkk: jupyter completed 40ms
2018-02-28T14:21:01.673Z - info: node/services/browser-windows:: ipc cje765d2a01gd3pn0wceax081: getTabs completed 6ms
2018-02-28T14:21:01.706Z - info: node/services/browser-windows:: ipc cje765d3901gf3pn054lrehld: jupyter completed 4ms
2018-02-28T14:21:01.720Z - info: node/services/browser-windows:: ipc cje765d3901gg3pn0be90k9az: jupyter completed 19ms
2018-02-28T14:21:01.730Z - info: node/services/browser-windows:: ipc cje765d3901gh3pn05a1qtbtp: jupyter completed 29ms
2018-02-28T14:21:01.741Z - info: node/services/browser-windows:: ipc cje765d3901gi3pn0eslkcndx: jupyter completed 40ms
2018-02-28T14:21:03.773Z - info: node/services/browser-windows:: ipc cje765eoi01gl3pn000gfzwtr: getTabs completed 11ms
2018-02-28T14:21:03.828Z - info: node/services/browser-windows:: ipc cje765epm01gn3pn02is82el4: jupyter completed 26ms
2018-02-28T14:21:03.839Z - info: node/services/browser-windows:: ipc cje765epr01go3pn08w4b2e90: jupyter completed 31ms
2018-02-28T14:21:03.853Z - info: node/services/browser-windows:: ipc cje765epr01gp3pn0ocfornme: jupyter completed 45ms
2018-02-28T14:21:03.862Z - info: node/services/browser-windows:: ipc cje765epr01gq3pn0djnir4ab: jupyter completed 55ms
2018-02-28T14:21:06.443Z - info: node/services/browser-windows:: ipc cje765gqx01gt3pn0y3kt0vt2: getTabs completed 2ms
2018-02-28T14:21:06.480Z - info: node/services/browser-windows:: ipc cje765grv01gv3pn020n7lf2n: jupyter completed 4ms
2018-02-28T14:21:06.489Z - info: node/services/browser-windows:: ipc cje765grv01gw3pn0tnu4g9o5: jupyter completed 13ms
2018-02-28T14:21:06.494Z - info: node/services/browser-windows:: ipc cje765grv01gx3pn0lff0sg6p: jupyter completed 19ms
2018-02-28T14:21:06.504Z - info: node/services/browser-windows:: ipc cje765grv01gy3pn005qi3kmb: jupyter completed 29ms
2018-02-28T14:21:27.540Z - info: node/services/browser-windows:: ipc cje765x0u01hl3pn0i6idrjyu: getTabs completed 6ms
2018-02-28T14:21:27.614Z - info: node/services/browser-windows:: ipc cje765x2m01hn3pn0dkgfkxtg: jupyter completed 16ms
2018-02-28T14:21:27.626Z - info: node/services/browser-windows:: ipc cje765x2o01ho3pn0zaj9nzyy: jupyter completed 26ms
2018-02-28T14:21:27.822Z - info: node/index:: new plot served from http://localhost:8201/118128-11797-1en44ds.751q4u0udi.png
2018-02-28T14:21:27.839Z - info: node/services/browser-windows:: ipc cje765x8u01hp3pn0p3bcnqqh: jupyter completed 17ms
2018-02-28T14:21:27.857Z - info: node/services/browser-windows:: ipc cje765x8v01hq3pn01kz8w9oj: jupyter completed 34ms
2018-02-28T14:21:27.873Z - info: node/services/plot-server:: sending file { filename: '/tmp/118128-11797-1en44ds.751q4u0udi.png',
  route: '/118128-11797-1en44ds.751q4u0udi.png',
  port: 8201 }
2018-02-28T14:21:27.877Z - info: node/services/browser-windows:: ipc cje765x8w01hr3pn0i2cprpu4: jupyter completed 52ms
2018-02-28T14:21:27.891Z - info: node/services/plot-server:: sending file
2018-02-28T14:22:33.712Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje767c2a01ht3pn00hnnfzrv',
  '2': { type: 'ADD_FILE' },
  '3': 'mainWindow' }
2018-02-28T14:23:23.176Z - info: node/services/browser-windows:: close mainWindow
2018-02-28T14:23:23.177Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-28T14:23:23.209Z - info: node/services/browser-windows:: ipc cje768e9501i83pn043e114f2: dispatch completed 31ms
2018-02-28T14:33:14.220Z - info: node/services/browser-windows:: close mainWindow
2018-02-28T14:33:14.231Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-28T14:33:14.243Z - info: node/services/browser-windows:: ipc cje76l2bc01i93pn075nj0jrc: dispatch completed 11ms
2018-02-28T14:33:16.073Z - info: node/index:: onQuitApplication
2018-02-28T14:33:16.082Z - info: node/index:: stopping all file watchers
2018-02-28T14:33:16.087Z - info: node/index:: killing all children processes
2018-02-28T14:33:16.931Z - info: node/index:: python kernel process event cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-28T14:33:16.943Z - info: node/services/processes:: removed child process { pid: 12450,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '11797',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:35485',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1990,unix/unix:/tmp/.ICE-unix/1990',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-28T14:33:16.946Z - info: node/index:: python kernel process closed cje764xx701fl3pn06x2st921 process 12450 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-28T14:33:16.952Z - info: node/index:: process 12450 successfully killed { code: null, signal: 'SIGTERM' }
2018-02-28T14:33:16.953Z - info: node/index:: quiting
2018-02-28T14:33:16.953Z - info: node/index:: before-quit
2018-02-28T14:33:16.954Z - info: node/services/browser-windows:: close mainWindow
2018-02-28T14:33:16.954Z - info: node/index:: forcing quit on linux
2018-02-28T14:33:16.973Z - info: node/index:: quit { errorCode: 0 }
2018-02-28T14:33:16.974Z - info: node/services/browser-windows:: destroyed
2018-02-28T14:33:16.974Z - info: node/services/browser-windows:: closed mainWindow
2018-02-28T14:33:16.975Z - info: node/services/ipc-promises:: did not reply to event because sender is destroyed 1769 quitApplication
2018-03-01T02:43:49.034Z - info: node/index:: { action: 'started',
  argv: 
   { _: {},
     dev: false,
     startup: true,
     h: false,
     help: false,
     version: false,
     '$0': '/opt/Rodeo/rodeo' },
  'process.argv': { '0': '/opt/Rodeo/rodeo' },
  cwd: '/home/andy',
  versions: 
   { http_parser: '2.7.0',
     node: '6.5.0',
     v8: '5.3.332.47',
     uv: '1.9.1',
     zlib: '1.2.8',
     ares: '1.10.1-DEV',
     modules: '50',
     openssl: '1.0.2h',
     electron: '1.4.13',
     chrome: '53.0.2785.143',
     'atom-shell': '1.4.13' },
  resourcesPath: '/opt/Rodeo/resources',
  isActiveSquirrelCommand: false }
2018-03-01T02:43:49.114Z - info: node/index:: serving plots from port 8403
2018-03-01T02:43:49.115Z - info: node/index:: will-finish-launching
2018-03-01T02:43:49.117Z - info: node/index:: startMainWindow
2018-03-01T02:43:49.218Z - info: node/index:: attachIpcMainEvents
2018-03-01T02:43:50.280Z - info: node/services/updater:: checking for updates for 2.5.2
2018-03-01T02:43:50.281Z - info: node/index:: Getting Environment Variables
2018-03-01T02:43:50.290Z - info: node/services/processes:: added child process { pid: 4411,
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 1 children running
2018-03-01T02:43:50.347Z - info: node/services/processes:: removed child process { pid: 4411,
  code: 0,
  signal: null,
  errors: {},
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 0 children running
2018-03-01T02:43:50.351Z - info: node/services/env:: Got Environment Variables { QTINC: '/usr/lib64/qt-3.3/include',
  LANG: 'en_US.UTF-8',
  GDM_LANG: 'en_US.UTF-8',
  HISTCONTROL: 'ignoredups',
  HOSTNAME: 'optimus',
  QTDIR: '/usr/lib64/qt-3.3',
  USERNAME: 'andy',
  XDG_VTNR: '2',
  XDG_SESSION_ID: '2',
  USER: 'andy',
  DESKTOP_SESSION: 'gnome',
  PWD: '/home/andy',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  HOME: '/home/andy',
  JOURNAL_STREAM: '9:33705',
  XDG_SESSION_TYPE: 'wayland',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_SESSION_DESKTOP: 'gnome',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  MAIL: '/var/spool/mail/andy',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  SHELL: '/bin/bash',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_SEAT: 'seat0',
  SHLVL: '2',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  GDMSESSION: 'gnome',
  LOGNAME: 'andy',
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  XDG_RUNTIME_DIR: '/run/user/1000',
  PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx',
  MODULESHOME: '/usr/share/Modules',
  HISTSIZE: '1000',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  QT_IM_MODULE: 'ibus',
  XMODIFIERS: '@im',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  XDG_MENU_PREFIX: 'gnome-',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
  DISPLAY: ':0',
  WAYLAND_DISPLAY: 'wayland-0',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  CHROME_DESKTOP: 'Rodeo.desktop',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  _: '/usr/bin/env' }
2018-03-01T02:43:50.354Z - info: node/index:: { QTINC: '/usr/lib64/qt-3.3/include',
  LANG: 'en_US.UTF-8',
  GDM_LANG: 'en_US.UTF-8',
  HISTCONTROL: 'ignoredups',
  HOSTNAME: 'optimus',
  QTDIR: '/usr/lib64/qt-3.3',
  USERNAME: 'andy',
  XDG_VTNR: '2',
  XDG_SESSION_ID: '2',
  USER: 'andy',
  DESKTOP_SESSION: 'gnome',
  PWD: '/home/andy',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  HOME: '/home/andy',
  JOURNAL_STREAM: '9:33705',
  XDG_SESSION_TYPE: 'wayland',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_SESSION_DESKTOP: 'gnome',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  MAIL: '/var/spool/mail/andy',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  SHELL: '/bin/bash',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_SEAT: 'seat0',
  SHLVL: '2',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  GDMSESSION: 'gnome',
  LOGNAME: 'andy',
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  XDG_RUNTIME_DIR: '/run/user/1000',
  PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx',
  MODULESHOME: '/usr/share/Modules',
  HISTSIZE: '1000',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  QT_IM_MODULE: 'ibus',
  XMODIFIERS: '@im',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  XDG_MENU_PREFIX: 'gnome-',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
  DISPLAY: ':0',
  WAYLAND_DISPLAY: 'wayland-0',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  CHROME_DESKTOP: 'Rodeo.desktop',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  _: '/usr/bin/env' }
2018-03-01T02:43:50.449Z - info: node/index:: creating new python kernel process creating python client
2018-03-01T02:43:50.452Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python3',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:33705',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-03-01T02:43:50.453Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:33705',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-03-01T02:43:50.455Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:33705',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-03-01T02:43:50.478Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:33705',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: 'python-sphinx/python3-sphinx',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env',
     _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
  kernelName: 'python3' }
2018-03-01T02:43:50.479Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:33705',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: 'python-sphinx/python3-sphinx',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env',
  _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' }
2018-03-01T02:43:50.501Z - info: node/services/processes:: added child process { pid: 4441,
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:33705',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-03-01T02:43:50.505Z - info: node/index:: created new python kernel process cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-03-01T02:43:50.507Z - info: node/services/files:: startWatching file-viewer /home/andy/*
2018-03-01T02:43:50.535Z - info: node/services/browser-windows:: did-finish-load mainWindow
2018-03-01T02:43:51.173Z - info: node/index:: python kernel process event cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-03-01T02:43:51.857Z - info: node/index:: python kernel process event cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-03-01T02:43:52.695Z - info: node/index:: new python kernel process is ready cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-03-01T02:44:09.734Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje7wp1fo0003cxn0jfvx1qvc',
  '2': { type: 'SHOW_PREFERENCES' },
  '3': 'mainWindow' }
2018-03-01T02:44:32.426Z - info: node/services/browser-windows:: did-finish-load cid-2x-znm0g
2018-03-01T02:44:32.427Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'READY_TO_SHOW', name: 'cid-2x-znm0g' }
2018-03-01T02:44:32.432Z - info: node/services/browser-windows:: dispatch cid-2x-znm0g { payload: { instanceId: 'cje7womk00000cxn0vey8e280' },
  type: 'JUPYTER_KERNEL_INSTANCE_SET' }
2018-03-01T02:44:32.434Z - info: node/services/browser-windows:: dispatch cid-2x-znm0g { groupId: null,
  meta: { sender: 'self' },
  tab: 
   { content: 
      { variables: 
         { DataFrame: {},
           Series: {},
           dict: {},
           function: {},
           list: {},
           ndarray: {},
           other: {} } },
     contentType: 'variable-viewer',
     icon: 'list',
     id: 'cid-3-x3so8',
     label: 'Environment',
     lastFocused: 1519827537542 },
  type: 'ADD_TAB' }
2018-03-01T02:44:32.439Z - info: node/services/browser-windows:: ipc cje7wpiy50004cxn0f7ysiri9: dispatch completed 10ms
2018-03-01T02:44:32.443Z - info: node/services/browser-windows:: ipc cje7wpiy80005cxn08o5rgr2o: dispatch completed 10ms
2018-03-01T02:44:32.449Z - info: node/services/browser-windows:: ipc cje7wpiyi0008cxn0pscxb3my: sharedAction completed 7ms
2018-03-01T02:44:32.472Z - info: node/services/browser-windows:: ipc cje7wpiya0006cxn0z91lso58: dispatch completed 38ms
2018-03-01T02:44:32.472Z - info: node/services/browser-windows:: ipc cje7wpiyf0007cxn07mqi2pwe: sharedAction completed 33ms
2018-03-01T02:44:32.948Z - info: node/services/browser-windows:: ipc cje7wpjcd000acxn0e4hg2l5u: sharedAction completed 6ms
2018-03-01T02:44:32.950Z - info: node/services/browser-windows:: ipc cje7wpjce000bcxn05x79ch4n: sharedAction completed 7ms
2018-03-01T02:44:35.701Z - info: node/services/browser-windows:: close cid-2x-znm0g
2018-03-01T02:44:35.706Z - info: node/services/browser-windows:: destroyed
2018-03-01T02:44:35.707Z - info: node/services/browser-windows:: closed cid-2x-znm0g
2018-03-01T02:45:04.149Z - info: node/services/browser-windows:: ipc cje7wq7f2000dcxn07s7imuoa: getTabs completed 5ms
2018-03-01T02:45:04.224Z - info: node/services/browser-windows:: ipc cje7wq7gv000fcxn0555nu5x7: jupyter completed 17ms
2018-03-01T02:45:04.243Z - info: node/services/browser-windows:: ipc cje7wq7gy000gcxn0rm5qu43k: jupyter completed 33ms
2018-03-01T02:45:04.248Z - info: node/services/browser-windows:: ipc cje7wq7gy000hcxn0e19854dh: jupyter completed 38ms
2018-03-01T02:45:04.274Z - info: node/services/browser-windows:: ipc cje7wq7h1000icxn0h9j9hl9w: jupyter completed 60ms
2018-03-01T02:45:04.712Z - info: node/services/browser-windows:: ipc cje7wq7ua000kcxn0egmqsk70: getTabs completed 22ms
2018-03-01T02:45:04.785Z - info: node/services/browser-windows:: ipc cje7wq7wo000mcxn0uyahhpht: jupyter completed 8ms
2018-03-01T02:45:04.806Z - info: node/services/browser-windows:: ipc cje7wq7wr000ncxn0uocek5j4: jupyter completed 27ms
2018-03-01T02:45:04.823Z - info: node/services/browser-windows:: ipc cje7wq7wv000ocxn0ti4b84dg: jupyter completed 39ms
2018-03-01T02:45:04.823Z - info: node/services/browser-windows:: ipc cje7wq7wv000pcxn06g8g17p3: jupyter completed 40ms
2018-03-01T02:45:10.354Z - info: node/services/browser-windows:: ipc cje7wqc78000tcxn0xcz8tkml: getTabs completed 14ms
2018-03-01T02:45:10.391Z - info: node/services/browser-windows:: ipc cje7wqc8h000vcxn0sbyc9uel: jupyter completed 6ms
2018-03-01T02:45:10.406Z - info: node/services/browser-windows:: ipc cje7wqc8h000wcxn0l8duoh8f: jupyter completed 18ms
2018-03-01T02:45:10.424Z - info: node/services/browser-windows:: ipc cje7wqc8m000xcxn067x3kyuv: jupyter completed 34ms
2018-03-01T02:45:10.431Z - info: node/services/browser-windows:: ipc cje7wqc8m000ycxn08gzvogb8: jupyter completed 40ms
2018-03-01T02:45:41.925Z - info: node/services/browser-windows:: ipc cje7wr0k0001mcxn0n62ri8vy: getTabs completed 17ms
2018-03-01T02:45:41.995Z - info: node/services/browser-windows:: ipc cje7wr0mb001ocxn031qnwi2k: jupyter completed 7ms
2018-03-01T02:45:42.005Z - info: node/services/browser-windows:: ipc cje7wr0mc001pcxn041i3e7pn: jupyter completed 17ms
2018-03-01T02:45:42.031Z - info: node/services/browser-windows:: ipc cje7wr0n0001qcxn0yge60l8u: jupyter completed 19ms
2018-03-01T02:45:42.044Z - info: node/services/browser-windows:: ipc cje7wr0n1001rcxn0ga4xw6xy: jupyter completed 31ms
2018-03-01T02:45:42.065Z - info: node/services/browser-windows:: ipc cje7wr0n1001scxn091awss43: jupyter completed 52ms
2018-03-01T02:45:44.480Z - info: node/services/browser-windows:: ipc cje7wr2j1001vcxn03pmomgr9: getTabs completed 18ms
2018-03-01T02:45:44.524Z - info: node/services/browser-windows:: ipc cje7wr2kk001xcxn01ckbioe2: jupyter completed 8ms
2018-03-01T02:45:44.537Z - info: node/services/browser-windows:: ipc cje7wr2kk001ycxn0ku1tng24: jupyter completed 21ms
2018-03-01T02:45:44.542Z - info: node/services/browser-windows:: ipc cje7wr2kk001zcxn0jk62hrkb: jupyter completed 25ms
2018-03-01T02:45:44.550Z - info: node/services/browser-windows:: ipc cje7wr2kl0020cxn0b10cxqnj: jupyter completed 33ms
2018-03-01T02:45:45.027Z - info: node/services/browser-windows:: ipc cje7wr2yh0022cxn0n3v7msd7: getTabs completed 9ms
2018-03-01T02:45:45.073Z - info: node/services/browser-windows:: ipc cje7wr2zt0024cxn0k4o5tznb: jupyter completed 8ms
2018-03-01T02:45:45.090Z - info: node/services/browser-windows:: ipc cje7wr2zu0025cxn0ks17v89s: jupyter completed 24ms
2018-03-01T02:45:45.107Z - info: node/services/browser-windows:: ipc cje7wr2zu0026cxn0meg2xyq3: jupyter completed 41ms
2018-03-01T02:45:45.108Z - info: node/services/browser-windows:: ipc cje7wr2zu0027cxn0p4w7jvig: jupyter completed 41ms
2018-03-01T02:45:51.333Z - info: node/services/browser-windows:: ipc cje7wr7te002icxn0kzjw0em1: getTabs completed 19ms
2018-03-01T02:45:51.392Z - info: node/services/browser-windows:: ipc cje7wr7v9002kcxn0gqxpiha3: jupyter completed 11ms
2018-03-01T02:45:51.405Z - info: node/services/browser-windows:: ipc cje7wr7vb002lcxn0wzyd9h8e: jupyter completed 22ms
2018-03-01T02:45:51.532Z - info: node/index:: new plot served from http://localhost:8403/118128-4353-1kuf63u.kxc56a8aor.png
2018-03-01T02:45:51.533Z - info: node/services/browser-windows:: ipc cje7wr7z4002mcxn0xyvc1yk2: jupyter completed 13ms
2018-03-01T02:45:51.554Z - info: node/services/browser-windows:: ipc cje7wr7zh002ncxn08b9ivqv5: jupyter completed 20ms
2018-03-01T02:45:51.570Z - info: node/services/plot-server:: sending file { filename: '/tmp/118128-4353-1kuf63u.kxc56a8aor.png',
  route: '/118128-4353-1kuf63u.kxc56a8aor.png',
  port: 8403 }
2018-03-01T02:45:51.573Z - info: node/services/browser-windows:: ipc cje7wr7zj002ocxn04bclvhkb: jupyter completed 38ms
2018-03-01T02:45:51.588Z - info: node/services/plot-server:: sending file
2018-03-01T02:45:59.569Z - info: node/services/browser-windows:: did-finish-load cid-55-znm0g
2018-03-01T02:45:59.570Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'READY_TO_SHOW', name: 'cid-55-znm0g' }
2018-03-01T02:45:59.571Z - info: node/services/browser-windows:: dispatch cid-55-znm0g { payload: { instanceId: 'cje7womk00000cxn0vey8e280' },
  type: 'JUPYTER_KERNEL_INSTANCE_SET' }
2018-03-01T02:45:59.573Z - info: node/services/browser-windows:: dispatch cid-55-znm0g { groupId: null,
  meta: { sender: 'self' },
  tab: 
   { content: 
      { active: 'cid-50-znm0g',
        plots: 
         { '0': 
            { createdAt: 1519872351534,
              data: 
               { 'image/png': 'http://localhost:8403/118128-4353-1kuf63u.kxc56a8aor.png',
                 'text/plain': '<matplotlib.figure.Figure at 0x7fe890af9a20>' },
              id: 'cid-50-znm0g' } } },
     contentType: 'plot-viewer',
     icon: 'bar-chart',
     id: 'cid-a-x3so8',
     label: 'Plots',
     lastFocused: 1519872355739 },
  type: 'ADD_TAB' }
2018-03-01T02:45:59.575Z - info: node/services/browser-windows:: ipc cje7wre6q002qcxn009yooxxx: dispatch completed 5ms
2018-03-01T02:45:59.577Z - info: node/services/browser-windows:: ipc cje7wre6r002rcxn05hnu5z1r: dispatch completed 5ms
2018-03-01T02:45:59.577Z - info: node/services/browser-windows:: ipc cje7wre6w002ucxn0rh1hyk1v: sharedAction completed 1ms
2018-03-01T02:45:59.592Z - info: node/services/browser-windows:: ipc cje7wre6t002scxn06mmr1f1p: dispatch completed 19ms
2018-03-01T02:45:59.594Z - info: node/services/plot-server:: sending file { filename: '/tmp/118128-4353-1kuf63u.kxc56a8aor.png',
  route: '/118128-4353-1kuf63u.kxc56a8aor.png',
  port: 8403 }
2018-03-01T02:45:59.595Z - info: node/services/browser-windows:: ipc cje7wre6v002tcxn0qw9r1dwx: sharedAction completed 19ms
2018-03-01T02:45:59.598Z - info: node/services/plot-server:: sending file
2018-03-01T02:46:00.079Z - info: node/services/browser-windows:: ipc cje7wrekt002wcxn0dqk5ylma: sharedAction completed 2ms
2018-03-01T02:46:00.080Z - info: node/services/browser-windows:: ipc cje7wreku002xcxn0e8x4qlth: sharedAction completed 2ms
2018-03-01T02:46:13.992Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje7wrpba002ycxn01hjhfwac',
  '2': { type: 'ZOOM_TO_DEFAULT' },
  '3': 'cid-55-znm0g' }
2018-03-01T02:46:14.005Z - info: node/services/browser-windows:: ipc cje7wrpbi002zcxn0oxmfne3o: sharedAction completed 7ms
2018-03-01T02:46:19.295Z - info: node/services/browser-windows:: did-finish-load cid-3-pxszl
2018-03-01T02:46:19.296Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'READY_TO_SHOW', name: 'cid-3-pxszl' }
2018-03-01T02:46:19.296Z - info: node/services/browser-windows:: dispatch cid-55-znm0g { type: 'READY_TO_SHOW', name: 'cid-3-pxszl' }
2018-03-01T02:46:19.299Z - info: node/services/browser-windows:: dispatch cid-3-pxszl { payload: { instanceId: 'cje7womk00000cxn0vey8e280' },
  type: 'JUPYTER_KERNEL_INSTANCE_SET' }
2018-03-01T02:46:19.301Z - info: node/services/browser-windows:: dispatch cid-3-pxszl { groupId: null,
  meta: { sender: 'self' },
  tab: 
   { content: 
      { active: 'cid-50-znm0g',
        plots: 
         { '0': 
            { createdAt: 1519872351534,
              data: 
               { 'image/png': 'http://localhost:8403/118128-4353-1kuf63u.kxc56a8aor.png',
                 'text/plain': '<matplotlib.figure.Figure at 0x7fe890af9a20>' },
              id: 'cid-50-znm0g' } } },
     contentType: 'plot-viewer',
     icon: 'bar-chart',
     id: 'cid-a-x3so8',
     label: 'Plots',
     lastFocused: 1519872355739 },
  type: 'ADD_TAB' }
2018-03-01T02:46:19.304Z - info: node/services/browser-windows:: ipc cje7wrtep0031cxn0julbzz4r: dispatch completed 7ms
2018-03-01T02:46:19.306Z - info: node/services/browser-windows:: ipc cje7wrteo0030cxn0viqw7ke6: dispatch completed 10ms
2018-03-01T02:46:19.312Z - info: node/services/browser-windows:: ipc cje7wrtew0036cxn0d5kpwumm: sharedAction completed 8ms
2018-03-01T02:46:19.313Z - info: node/services/browser-windows:: ipc cje7wrter0032cxn0e62nixys: dispatch completed 14ms
2018-03-01T02:46:19.313Z - info: node/services/browser-windows:: ipc cje7wrtev0034cxn05jo67t0v: sharedAction completed 10ms
2018-03-01T02:46:19.313Z - info: node/services/browser-windows:: ipc cje7wrtez0039cxn08gwpssx3: sharedAction completed 6ms
2018-03-01T02:46:19.314Z - info: node/services/browser-windows:: ipc cje7wrtez0038cxn0vo8y9sur: sharedAction completed 6ms
2018-03-01T02:46:19.335Z - info: node/services/browser-windows:: ipc cje7wrtet0033cxn0eqwr8luc: dispatch completed 34ms
2018-03-01T02:46:19.335Z - info: node/services/browser-windows:: ipc cje7wrtev0035cxn0txrwu6gj: sharedAction completed 32ms
2018-03-01T02:46:19.337Z - info: node/services/browser-windows:: ipc cje7wrtex0037cxn0hq270bs3: sharedAction completed 30ms
2018-03-01T02:46:19.344Z - info: node/services/plot-server:: sending file { filename: '/tmp/118128-4353-1kuf63u.kxc56a8aor.png',
  route: '/118128-4353-1kuf63u.kxc56a8aor.png',
  port: 8403 }
2018-03-01T02:46:19.347Z - info: node/services/plot-server:: sending file
2018-03-01T02:46:19.826Z - info: node/services/browser-windows:: ipc cje7wrtt5003ccxn0vtxwa5q3: sharedAction completed 8ms
2018-03-01T02:46:19.827Z - info: node/services/browser-windows:: ipc cje7wrtt7003ecxn0tt8dzqlz: sharedAction completed 7ms
2018-03-01T02:46:19.830Z - info: node/services/browser-windows:: ipc cje7wrtt5003bcxn052i4ta1r: sharedAction completed 11ms
2018-03-01T02:46:19.831Z - info: node/services/browser-windows:: ipc cje7wrtt7003dcxn0kkol61bo: sharedAction completed 12ms
2018-03-01T02:46:33.226Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje7ws45k003fcxn0o6ujwv8s',
  '2': { type: 'ZOOM_IN' },
  '3': 'cid-3-pxszl' }
2018-03-01T02:46:33.243Z - info: node/services/browser-windows:: ipc cje7ws45w003hcxn0j50gc08l: sharedAction completed 7ms
2018-03-01T02:46:33.246Z - info: node/services/browser-windows:: ipc cje7ws45w003gcxn0wvdsfvxz: sharedAction completed 10ms
2018-03-01T02:46:35.147Z - info: node/services/browser-windows:: close cid-3-pxszl
2018-03-01T02:46:35.152Z - info: node/services/browser-windows:: destroyed
2018-03-01T02:46:35.154Z - info: node/services/browser-windows:: closed cid-3-pxszl
2018-03-01T02:46:38.627Z - info: node/services/browser-windows:: close cid-55-znm0g
2018-03-01T02:46:38.639Z - info: node/services/browser-windows:: destroyed
2018-03-01T02:46:38.640Z - info: node/services/browser-windows:: closed cid-55-znm0g
2018-03-01T02:46:41.823Z - info: node/services/browser-windows:: close mainWindow
2018-03-01T02:46:41.826Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-03-01T02:46:41.848Z - info: node/services/browser-windows:: ipc cje7wsasi003icxn0xbau1a5r: dispatch completed 21ms
2018-03-01T02:46:44.469Z - info: node/index:: onQuitApplication
2018-03-01T02:46:44.473Z - info: node/index:: stopping all file watchers
2018-03-01T02:46:44.481Z - info: node/index:: killing all children processes
2018-03-01T02:46:44.680Z - info: node/index:: python kernel process event cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-03-01T02:46:44.725Z - info: node/services/processes:: removed child process { pid: 4441,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '4353',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:33705',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: 'python-sphinx/python3-sphinx',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/libexec/python3-sphinx:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1948,unix/unix:/tmp/.ICE-unix/1948',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env',
        _LMFILES_: '/usr/share/modulefiles/python-sphinx/python3-sphinx' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-03-01T02:46:44.737Z - info: node/index:: python kernel process closed cje7womk00000cxn0vey8e280 process 4441 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-03-01T02:46:44.746Z - info: node/index:: process 4441 successfully killed { code: null, signal: 'SIGTERM' }
2018-03-01T02:46:44.747Z - info: node/index:: quiting
2018-03-01T02:46:44.747Z - info: node/index:: before-quit
2018-03-01T02:46:44.748Z - info: node/services/browser-windows:: close mainWindow
2018-03-01T02:46:44.749Z - info: node/index:: forcing quit on linux
2018-03-01T02:46:44.768Z - info: node/index:: quit { errorCode: 0 }
2018-03-01T02:46:44.768Z - info: node/services/browser-windows:: destroyed
2018-03-01T02:46:44.769Z - info: node/services/browser-windows:: closed mainWindow
2018-03-01T02:46:44.769Z - info: node/services/ipc-promises:: did not reply to event because sender is destroyed 135 quitApplication
2018-04-21T21:41:14.007Z - info: node/index:: { action: 'started',
  argv: 
   { _: {},
     dev: false,
     startup: true,
     h: false,
     help: false,
     version: false,
     '$0': '/opt/Rodeo/rodeo' },
  'process.argv': { '0': '/opt/Rodeo/rodeo' },
  cwd: '/home/andy',
  versions: 
   { http_parser: '2.7.0',
     node: '6.5.0',
     v8: '5.3.332.47',
     uv: '1.9.1',
     zlib: '1.2.8',
     ares: '1.10.1-DEV',
     modules: '50',
     openssl: '1.0.2h',
     electron: '1.4.13',
     chrome: '53.0.2785.143',
     'atom-shell': '1.4.13' },
  resourcesPath: '/opt/Rodeo/resources',
  isActiveSquirrelCommand: false }
2018-04-21T21:41:14.104Z - info: node/index:: serving plots from port 9132
2018-04-21T21:41:14.105Z - info: node/index:: will-finish-launching
2018-04-21T21:41:14.107Z - info: node/index:: startMainWindow
2018-04-21T21:41:14.243Z - info: node/index:: attachIpcMainEvents
2018-04-21T21:41:15.521Z - info: node/services/updater:: checking for updates for 2.5.2
2018-04-21T21:41:15.524Z - info: node/index:: Getting Environment Variables
2018-04-21T21:41:15.536Z - info: node/services/processes:: added child process { pid: 4105,
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 1 children running
2018-04-21T21:41:15.631Z - info: node/services/processes:: removed child process { pid: 4105,
  code: 0,
  signal: null,
  errors: {},
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 0 children running
2018-04-21T21:41:15.636Z - info: node/services/env:: Got Environment Variables { QTINC: '/usr/lib64/qt-3.3/include',
  LANG: 'en_US.UTF-8',
  GDM_LANG: 'en_US.UTF-8',
  HISTCONTROL: 'ignoredups',
  HOSTNAME: 'optimus',
  QTDIR: '/usr/lib64/qt-3.3',
  USERNAME: 'andy',
  XDG_VTNR: '2',
  XDG_SESSION_ID: '2',
  USER: 'andy',
  DESKTOP_SESSION: 'gnome',
  PWD: '/home/andy',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  HOME: '/home/andy',
  JOURNAL_STREAM: '9:34551',
  XDG_SESSION_TYPE: 'wayland',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_SESSION_DESKTOP: 'gnome',
  LOADEDMODULES: '',
  MAIL: '/var/spool/mail/andy',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  SHELL: '/bin/bash',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_SEAT: 'seat0',
  SHLVL: '2',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  GDMSESSION: 'gnome',
  LOGNAME: 'andy',
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  XDG_RUNTIME_DIR: '/run/user/1000',
  PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  MODULESHOME: '/usr/share/Modules',
  HISTSIZE: '1000',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  QT_IM_MODULE: 'ibus',
  XMODIFIERS: '@im',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  XDG_MENU_PREFIX: 'gnome-',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
  DISPLAY: ':0',
  WAYLAND_DISPLAY: 'wayland-0',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  CHROME_DESKTOP: 'Rodeo.desktop',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  _: '/usr/bin/env' }
2018-04-21T21:41:15.641Z - info: node/index:: { QTINC: '/usr/lib64/qt-3.3/include',
  LANG: 'en_US.UTF-8',
  GDM_LANG: 'en_US.UTF-8',
  HISTCONTROL: 'ignoredups',
  HOSTNAME: 'optimus',
  QTDIR: '/usr/lib64/qt-3.3',
  USERNAME: 'andy',
  XDG_VTNR: '2',
  XDG_SESSION_ID: '2',
  USER: 'andy',
  DESKTOP_SESSION: 'gnome',
  PWD: '/home/andy',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  HOME: '/home/andy',
  JOURNAL_STREAM: '9:34551',
  XDG_SESSION_TYPE: 'wayland',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_SESSION_DESKTOP: 'gnome',
  LOADEDMODULES: '',
  MAIL: '/var/spool/mail/andy',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  SHELL: '/bin/bash',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_SEAT: 'seat0',
  SHLVL: '2',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  GDMSESSION: 'gnome',
  LOGNAME: 'andy',
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  XDG_RUNTIME_DIR: '/run/user/1000',
  PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  MODULESHOME: '/usr/share/Modules',
  HISTSIZE: '1000',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  QT_IM_MODULE: 'ibus',
  XMODIFIERS: '@im',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  XDG_MENU_PREFIX: 'gnome-',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
  DISPLAY: ':0',
  WAYLAND_DISPLAY: 'wayland-0',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  CHROME_DESKTOP: 'Rodeo.desktop',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  _: '/usr/bin/env' }
2018-04-21T21:41:15.753Z - info: node/services/files:: startWatching file-viewer /home/andy/*
2018-04-21T21:41:15.793Z - info: node/index:: creating new python kernel process creating python client
2018-04-21T21:41:15.795Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python3',
  cwd: '~',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:34551',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: '',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env' },
  kernelName: 'python3' }
2018-04-21T21:41:15.796Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:34551',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: '',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env' },
  kernelName: 'python3' }
2018-04-21T21:41:15.797Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:34551',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: '',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env' },
  kernelName: 'python3' }
2018-04-21T21:41:15.799Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python3',
  cwd: '/home/andy',
  env: 
   { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
     'BASH_FUNC_scl%%': '() {  if [ "$1" ',
     CHROME_DESKTOP: 'Rodeo.desktop',
     CLICOLOR: 1,
     DBUS_SESSION_BUS_ADDRESS: 'unix:path',
     DESKTOP_SESSION: 'gnome',
     DISPLAY: ':0',
     GDMSESSION: 'gnome',
     GDM_LANG: 'en_US.UTF-8',
     GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
     GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
     GJS_DEBUG_OUTPUT: 'stderr',
     GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
     GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HISTCONTROL: 'ignoredups',
     HISTSIZE: '1000',
     HOME: '/home/andy',
     HOSTNAME: 'optimus',
     JOURNAL_STREAM: '9:34551',
     LANG: 'en_US.UTF-8',
     LESSOPEN: '||/usr/bin/lesspipe.sh %s',
     LOADEDMODULES: '',
     LOGNAME: 'andy',
     MAIL: '/var/spool/mail/andy',
     MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
     MODULESHOME: '/usr/share/Modules',
     PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
     PWD: '/home/andy',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     QTDIR: '/usr/lib64/qt-3.3',
     QTINC: '/usr/lib64/qt-3.3/include',
     QTLIB: '/usr/lib64/qt-3.3/lib',
     QT_IM_MODULE: 'ibus',
     SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
     SHELL: '/bin/bash',
     SHLVL: '2',
     SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
     SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
     USER: 'andy',
     USERNAME: 'andy',
     WAYLAND_DISPLAY: 'wayland-0',
     XDG_CURRENT_DESKTOP: 'GNOME',
     XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
     XDG_MENU_PREFIX: 'gnome-',
     XDG_RUNTIME_DIR: '/run/user/1000',
     XDG_SEAT: 'seat0',
     XDG_SESSION_DESKTOP: 'gnome',
     XDG_SESSION_ID: '2',
     XDG_SESSION_TYPE: 'wayland',
     XDG_VTNR: '2',
     XMODIFIERS: '@im',
     _: '/usr/bin/env' },
  kernelName: 'python3' }
2018-04-21T21:41:15.815Z - info: node/kernels/python/language:: setDefaultEnvVars { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
  'BASH_FUNC_scl%%': '() {  if [ "$1" ',
  CHROME_DESKTOP: 'Rodeo.desktop',
  CLICOLOR: 1,
  DBUS_SESSION_BUS_ADDRESS: 'unix:path',
  DESKTOP_SESSION: 'gnome',
  DISPLAY: ':0',
  GDMSESSION: 'gnome',
  GDM_LANG: 'en_US.UTF-8',
  GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
  GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
  GJS_DEBUG_OUTPUT: 'stderr',
  GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
  GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HISTCONTROL: 'ignoredups',
  HISTSIZE: '1000',
  HOME: '/home/andy',
  HOSTNAME: 'optimus',
  JOURNAL_STREAM: '9:34551',
  LANG: 'en_US.UTF-8',
  LESSOPEN: '||/usr/bin/lesspipe.sh %s',
  LOADEDMODULES: '',
  LOGNAME: 'andy',
  MAIL: '/var/spool/mail/andy',
  MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
  MODULESHOME: '/usr/share/Modules',
  PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
  PWD: '/home/andy',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  QTDIR: '/usr/lib64/qt-3.3',
  QTINC: '/usr/lib64/qt-3.3/include',
  QTLIB: '/usr/lib64/qt-3.3/lib',
  QT_IM_MODULE: 'ibus',
  SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
  SHELL: '/bin/bash',
  SHLVL: '2',
  SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
  SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
  USER: 'andy',
  USERNAME: 'andy',
  WAYLAND_DISPLAY: 'wayland-0',
  XDG_CURRENT_DESKTOP: 'GNOME',
  XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
  XDG_MENU_PREFIX: 'gnome-',
  XDG_RUNTIME_DIR: '/run/user/1000',
  XDG_SEAT: 'seat0',
  XDG_SESSION_DESKTOP: 'gnome',
  XDG_SESSION_ID: '2',
  XDG_SESSION_TYPE: 'wayland',
  XDG_VTNR: '2',
  XMODIFIERS: '@im',
  _: '/usr/bin/env' }
2018-04-21T21:41:15.822Z - info: node/services/processes:: added child process { pid: 4138,
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:34551',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: '',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-04-21T21:41:15.829Z - info: node/index:: created new python kernel process cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-04-21T21:41:15.830Z - info: node/services/browser-windows:: did-finish-load mainWindow
2018-04-21T21:41:16.339Z - info: node/index:: python kernel process event cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-04-21T21:41:17.509Z - info: node/index:: python kernel process event cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '/bin/sh: module: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `module\'\n/bin/sh: scl: line 1: syntax error: unexpected end of file\n/bin/sh: error importing function definition for `scl\'\n' }
2018-04-21T21:41:18.398Z - info: node/index:: new python kernel process is ready cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' }
2018-04-21T21:41:19.874Z - info: node/services/browser-windows:: ipc cjg9wrw520004zvn0sjlxt35m: getTabs completed 12ms
2018-04-21T21:41:19.933Z - info: node/services/browser-windows:: ipc cjg9wrw6j0006zvn0vqrykamk: jupyter completed 17ms
2018-04-21T21:41:19.950Z - info: node/services/browser-windows:: ipc cjg9wrw6k0007zvn004u9shd0: jupyter completed 33ms
2018-04-21T21:41:19.967Z - info: node/services/browser-windows:: ipc cjg9wrw6k0008zvn0x7d8jtrc: jupyter completed 50ms
2018-04-21T21:41:19.986Z - info: node/services/browser-windows:: ipc cjg9wrw6l0009zvn0fmy1qwhs: jupyter completed 69ms
2018-04-21T21:41:19.999Z - info: node/services/browser-windows:: ipc cjg9wrw6l000azvn0au092waa: jupyter completed 82ms
2018-04-21T21:41:31.452Z - info: node/services/browser-windows:: ipc cjg9ws52j000dzvn0o061beb4: getTabs completed 17ms
2018-04-21T21:41:31.501Z - info: node/services/browser-windows:: ipc cjg9ws53y000fzvn0tg5evtn3: jupyter completed 15ms
2018-04-21T21:41:31.523Z - info: node/services/browser-windows:: ipc cjg9ws541000gzvn0hsuu7l6s: jupyter completed 34ms
2018-04-21T21:41:31.541Z - info: node/services/browser-windows:: ipc cjg9ws541000hzvn08m955s9e: jupyter completed 51ms
2018-04-21T21:41:31.557Z - info: node/services/browser-windows:: ipc cjg9ws545000izvn0y9qpcej7: jupyter completed 64ms
2018-04-21T21:41:31.562Z - info: node/services/browser-windows:: ipc cjg9ws545000jzvn02pqdskqb: jupyter completed 69ms
2018-04-21T21:41:45.634Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjg9wsg0s000lzvn0v69ubdv7',
  '2': { type: 'SHOW_PREFERENCES' },
  '3': 'mainWindow' }
2018-04-21T21:42:27.894Z - info: node/services/browser-windows:: ipc cjg9wtcmc000nzvn0xxlta7ig: getTabs completed 13ms
2018-04-21T21:42:27.948Z - info: node/services/browser-windows:: ipc cjg9wtcns000pzvn0uk9f3lm6: jupyter completed 19ms
2018-04-21T21:42:27.968Z - info: node/services/browser-windows:: ipc cjg9wtcnv000qzvn0o6260nhr: jupyter completed 37ms
2018-04-21T21:42:27.997Z - info: node/services/browser-windows:: ipc cjg9wtcnx000rzvn02f6k0x58: jupyter completed 64ms
2018-04-21T21:42:28.024Z - info: node/services/browser-windows:: ipc cjg9wtcnx000szvn068o5nkcn: jupyter completed 91ms
2018-04-21T21:42:28.851Z - info: node/services/browser-windows:: ipc cjg9wtdd5000uzvn02bqm8gcr: getTabs completed 9ms
2018-04-21T21:42:28.895Z - info: node/services/browser-windows:: ipc cjg9wtde9000wzvn05k70hzkg: jupyter completed 14ms
2018-04-21T21:42:28.907Z - info: node/services/browser-windows:: ipc cjg9wtdea000xzvn0cjcm6fbl: jupyter completed 24ms
2018-04-21T21:42:28.930Z - info: node/services/browser-windows:: ipc cjg9wtdeg000yzvn0locvsdor: jupyter completed 41ms
2018-04-21T21:42:28.946Z - info: node/services/browser-windows:: ipc cjg9wtdej000zzvn0dmqsja8z: jupyter completed 54ms
2018-04-21T21:42:28.959Z - info: node/services/browser-windows:: ipc cjg9wtdek0010zvn0dboe0eed: jupyter completed 65ms
2018-04-21T21:42:38.741Z - info: node/services/browser-windows:: ipc cjg9wtkzm0014zvn09cq6ozqd: getTabs completed 19ms
2018-04-21T21:42:38.784Z - info: node/services/browser-windows:: ipc cjg9wtl130016zvn0hkzzvgia: jupyter completed 9ms
2018-04-21T21:42:38.803Z - info: node/services/browser-windows:: ipc cjg9wtl140017zvn0yprm4evy: jupyter completed 27ms
2018-04-21T21:42:38.857Z - info: node/services/browser-windows:: ipc cjg9wtl2t0018zvn02n9qgvrk: jupyter completed 19ms
2018-04-21T21:42:39.296Z - info: node/services/browser-windows:: ipc cjg9wtlf8001azvn08k2kofy4: jupyter completed 11ms
2018-04-21T21:42:39.602Z - info: node/services/browser-windows:: ipc cjg9wtlno001bzvn0tkk69ez4: jupyter completed 14ms
2018-04-21T21:42:40.256Z - info: node/services/browser-windows:: ipc cjg9wtm56001czvn06lies0ek: jupyter completed 38ms
2018-04-21T21:42:40.285Z - info: node/services/browser-windows:: ipc cjg9wtm6r001dzvn06jxm4mfm: jupyter completed 10ms
2018-04-21T21:42:40.334Z - info: node/services/browser-windows:: ipc cjg9wtm7z001ezvn0km4xkq06: jupyter completed 15ms
2018-04-21T21:42:40.393Z - info: node/services/browser-windows:: ipc cjg9wtm9d001fzvn0gm36mx6e: jupyter completed 24ms
2018-04-21T21:42:40.443Z - info: node/services/browser-windows:: ipc cjg9wtmau001gzvn0veys9adu: jupyter completed 20ms
2018-04-21T21:42:40.487Z - info: node/services/browser-windows:: ipc cjg9wtmc6001hzvn0wo887gd4: jupyter completed 17ms
2018-04-21T21:42:40.542Z - info: node/services/browser-windows:: ipc cjg9wtmdk001izvn0wd3soszx: jupyter completed 20ms
2018-04-21T21:42:40.598Z - info: node/services/browser-windows:: ipc cjg9wtmf6001jzvn0elnj86td: jupyter completed 20ms
2018-04-21T21:42:40.647Z - info: node/services/browser-windows:: ipc cjg9wtmgj001kzvn02w1xtlfi: jupyter completed 19ms
2018-04-21T21:42:40.704Z - info: node/services/browser-windows:: ipc cjg9wtmhx001lzvn0aphatmgj: jupyter completed 27ms
2018-04-21T21:42:40.761Z - info: node/services/browser-windows:: ipc cjg9wtmje001mzvn0cs7qivvu: jupyter completed 31ms
2018-04-21T21:42:40.807Z - info: node/services/browser-windows:: ipc cjg9wtmkw001nzvn0x8zn6jqk: jupyter completed 23ms
2018-04-21T21:42:40.849Z - info: node/services/browser-windows:: ipc cjg9wtmm7001ozvn0npbvjgj6: jupyter completed 18ms
2018-04-21T21:42:40.909Z - info: node/services/browser-windows:: ipc cjg9wtmnl001pzvn0slki23hz: jupyter completed 26ms
2018-04-21T21:42:40.948Z - info: node/services/browser-windows:: ipc cjg9wtmoz001qzvn0exnn3dxe: jupyter completed 17ms
2018-04-21T21:42:41.007Z - info: node/services/browser-windows:: ipc cjg9wtmqk001rzvn0lcbcm79v: jupyter completed 18ms
2018-04-21T21:42:41.053Z - info: node/services/browser-windows:: ipc cjg9wtmrw001szvn0v2hyqvc4: jupyter completed 16ms
2018-04-21T21:42:41.101Z - info: node/services/browser-windows:: ipc cjg9wtmt8001tzvn0hnwb30bt: jupyter completed 16ms
2018-04-21T21:42:41.158Z - info: node/services/browser-windows:: ipc cjg9wtmus001uzvn07ik860er: jupyter completed 17ms
2018-04-21T21:42:41.270Z - info: node/services/browser-windows:: ipc cjg9wtmwe001vzvn0r51fira8: jupyter completed 70ms
2018-04-21T21:42:41.287Z - info: node/services/browser-windows:: ipc cjg9wtmxq001wzvn0asqfzgsq: jupyter completed 40ms
2018-04-21T21:42:41.321Z - info: node/services/browser-windows:: ipc cjg9wtmz3001xzvn0x1jah5tt: jupyter completed 25ms
2018-04-21T21:42:41.366Z - info: node/services/browser-windows:: ipc cjg9wtn0k001yzvn01ikq23cm: jupyter completed 17ms
2018-04-21T21:42:41.412Z - info: node/services/browser-windows:: ipc cjg9wtn1w001zzvn0tvzv87a5: jupyter completed 16ms
2018-04-21T21:42:41.467Z - info: node/services/browser-windows:: ipc cjg9wtn3g0020zvn0l1a4jrv6: jupyter completed 14ms
2018-04-21T21:42:41.517Z - info: node/services/browser-windows:: ipc cjg9wtn4t0021zvn0ylhgl5hr: jupyter completed 16ms
2018-04-21T21:42:41.570Z - info: node/services/browser-windows:: ipc cjg9wtn680022zvn04ndat1ju: jupyter completed 16ms
2018-04-21T21:42:41.620Z - info: node/services/browser-windows:: ipc cjg9wtn7l0023zvn0fsg6qqwd: jupyter completed 19ms
2018-04-21T21:42:41.671Z - info: node/services/browser-windows:: ipc cjg9wtn900024zvn0x78ckfum: jupyter completed 19ms
2018-04-21T21:42:41.759Z - info: node/services/browser-windows:: ipc cjg9wtnaf0025zvn08qh3cm9z: jupyter completed 55ms
2018-04-21T21:42:41.788Z - info: node/services/browser-windows:: ipc cjg9wtnbv0026zvn0wll8682m: jupyter completed 33ms
2018-04-21T21:42:41.831Z - info: node/services/browser-windows:: ipc cjg9wtndg0027zvn0lcoimr0r: jupyter completed 18ms
2018-04-21T21:42:41.878Z - info: node/services/browser-windows:: ipc cjg9wtnes0028zvn0h2gmklhh: jupyter completed 18ms
2018-04-21T21:42:41.930Z - info: node/services/browser-windows:: ipc cjg9wtnga0029zvn0tlub59za: jupyter completed 16ms
2018-04-21T21:42:41.979Z - info: node/services/browser-windows:: ipc cjg9wtnhm002azvn0n5j0p8n9: jupyter completed 17ms
2018-04-21T21:42:42.030Z - info: node/services/browser-windows:: ipc cjg9wtnj0002bzvn0tfv7fx3z: jupyter completed 18ms
2018-04-21T21:42:42.088Z - info: node/services/browser-windows:: ipc cjg9wtnkk002czvn0jk8z6e5a: jupyter completed 20ms
2018-04-21T21:42:42.138Z - info: node/services/browser-windows:: ipc cjg9wtnlv002dzvn0ckmpakvp: jupyter completed 23ms
2018-04-21T21:42:42.186Z - info: node/services/browser-windows:: ipc cjg9wtnna002ezvn0m8x5iz6y: jupyter completed 20ms
2018-04-21T21:42:42.235Z - info: node/services/browser-windows:: ipc cjg9wtnop002fzvn0ppg7l5pl: jupyter completed 18ms
2018-04-21T21:42:42.288Z - info: node/services/browser-windows:: ipc cjg9wtnq4002gzvn0uk25xk6g: jupyter completed 20ms
2018-04-21T21:42:42.344Z - info: node/services/browser-windows:: ipc cjg9wtnro002hzvn0javt8t2i: jupyter completed 20ms
2018-04-21T21:42:42.393Z - info: node/services/browser-windows:: ipc cjg9wtnt0002izvn0koj5fxvr: jupyter completed 20ms
2018-04-21T21:42:42.446Z - info: node/services/browser-windows:: ipc cjg9wtnud002jzvn0z1w4cqdp: jupyter completed 25ms
2018-04-21T21:42:42.496Z - info: node/services/browser-windows:: ipc cjg9wtnvx002kzvn0cr9fddxl: jupyter completed 19ms
2018-04-21T21:42:42.543Z - info: node/services/browser-windows:: ipc cjg9wtnxa002lzvn06c7j3ob0: jupyter completed 17ms
2018-04-21T21:42:42.599Z - info: node/services/browser-windows:: ipc cjg9wtnyr002mzvn0h7qykngx: jupyter completed 20ms
2018-04-21T21:42:42.646Z - info: node/services/browser-windows:: ipc cjg9wto04002nzvn0avq21wm2: jupyter completed 18ms
2018-04-21T21:42:42.700Z - info: node/services/browser-windows:: ipc cjg9wto1k002ozvn0apdv1jqf: jupyter completed 20ms
2018-04-21T21:42:42.749Z - info: node/services/browser-windows:: ipc cjg9wto2y002pzvn0j2waebvc: jupyter completed 18ms
2018-04-21T21:42:42.811Z - info: node/services/browser-windows:: ipc cjg9wto4e002qzvn0cramta8u: jupyter completed 29ms
2018-04-21T21:42:42.859Z - info: node/services/browser-windows:: ipc cjg9wto5v002rzvn0ece8mhf0: jupyter completed 24ms
2018-04-21T21:42:42.908Z - info: node/services/browser-windows:: ipc cjg9wto7a002szvn0gz6otlpt: jupyter completed 22ms
2018-04-21T21:42:42.958Z - info: node/services/browser-windows:: ipc cjg9wto8r002tzvn0n0da3lpo: jupyter completed 18ms
2018-04-21T21:42:43.007Z - info: node/services/browser-windows:: ipc cjg9wtoa3002uzvn0dukbhsg3: jupyter completed 20ms
2018-04-21T21:42:43.130Z - info: node/services/browser-windows:: ipc cjg9wtobu002vzvn0a0d868oj: jupyter completed 80ms
2018-04-21T21:42:43.174Z - info: node/services/browser-windows:: ipc cjg9wtodk002wzvn02y41zerg: jupyter completed 59ms
2018-04-21T21:42:43.195Z - info: node/services/browser-windows:: ipc cjg9wtoeq002xzvn03g2pz0vk: jupyter completed 41ms
2018-04-21T21:42:45.055Z - info: node/services/browser-windows:: ipc cjg9wtpv8002yzvn0hlnzahob: jupyter completed 10ms
2018-04-21T21:42:45.827Z - info: node/services/browser-windows:: ipc cjg9wtqgf002zzvn0mh3dmje8: jupyter completed 20ms
2018-04-21T21:42:46.083Z - info: node/services/browser-windows:: ipc cjg9wtqnc0030zvn0ytit1ml2: jupyter completed 26ms
2018-04-21T21:42:46.128Z - info: node/services/browser-windows:: ipc cjg9wtqol0031zvn0asu2arni: jupyter completed 27ms
2018-04-21T21:42:46.159Z - info: node/services/browser-windows:: ipc cjg9wtqpw0032zvn08sgoawu4: jupyter completed 10ms
2018-04-21T21:42:46.527Z - info: node/services/browser-windows:: ipc cjg9wtr050033zvn0ddtcn85o: jupyter completed 10ms
2018-04-21T21:42:46.792Z - info: node/services/browser-windows:: ipc cjg9wtr730034zvn0rk4f45qh: jupyter completed 25ms
2018-04-21T21:42:46.833Z - info: node/services/browser-windows:: ipc cjg9wtr8e0035zvn0ttm2t3ql: jupyter completed 19ms
2018-04-21T21:42:46.876Z - info: node/services/browser-windows:: ipc cjg9wtr9q0036zvn0suxunstr: jupyter completed 14ms
2018-04-21T21:42:46.932Z - info: node/services/browser-windows:: ipc cjg9wtrb90037zvn0kgafwj1k: jupyter completed 15ms
2018-04-21T21:42:46.979Z - info: node/services/browser-windows:: ipc cjg9wtrck0038zvn0912xynj5: jupyter completed 15ms
2018-04-21T21:42:47.029Z - info: node/services/browser-windows:: ipc cjg9wtrdz0039zvn0jvi9i04u: jupyter completed 14ms
2018-04-21T21:42:47.084Z - info: node/services/browser-windows:: ipc cjg9wtrfi003azvn0kq2il8c3: jupyter completed 13ms
2018-04-21T21:42:47.135Z - info: node/services/browser-windows:: ipc cjg9wtrgw003bzvn0nci3978i: jupyter completed 14ms
2018-04-21T21:42:47.187Z - info: node/services/browser-windows:: ipc cjg9wtria003czvn083rnrakj: jupyter completed 17ms
2018-04-21T21:42:47.240Z - info: node/services/browser-windows:: ipc cjg9wtrju003dzvn0wtumchqd: jupyter completed 14ms
2018-04-21T21:42:47.287Z - info: node/services/browser-windows:: ipc cjg9wtrl4003ezvn02kui0s44: jupyter completed 15ms
2018-04-21T21:42:47.384Z - info: node/services/browser-windows:: ipc cjg9wtrmq003fzvn0qj8hs4rw: jupyter completed 53ms
2018-04-21T21:42:47.420Z - info: node/services/browser-windows:: ipc cjg9wtroc003gzvn0gmdy6dv0: jupyter completed 32ms
2018-04-21T21:42:47.469Z - info: node/services/browser-windows:: ipc cjg9wtrq0003hzvn04xiqt6k6: jupyter completed 19ms
2018-04-21T21:42:47.512Z - info: node/services/browser-windows:: ipc cjg9wtrr4003izvn0gl17cfyd: jupyter completed 24ms
2018-04-21T21:42:47.551Z - info: node/services/browser-windows:: ipc cjg9wtrse003jzvn0v67whm6k: jupyter completed 17ms
2018-04-21T21:42:47.606Z - info: node/services/browser-windows:: ipc cjg9wtrtx003kzvn0m13rnut8: jupyter completed 17ms
2018-04-21T21:42:47.653Z - info: node/services/browser-windows:: ipc cjg9wtrv8003lzvn0g6wi3zn2: jupyter completed 17ms
2018-04-21T21:42:47.707Z - info: node/services/browser-windows:: ipc cjg9wtrwq003mzvn0mlnoq95l: jupyter completed 16ms
2018-04-21T21:42:47.755Z - info: node/services/browser-windows:: ipc cjg9wtry2003nzvn0553q16rd: jupyter completed 17ms
2018-04-21T21:42:47.876Z - info: node/services/browser-windows:: ipc cjg9wtrzp003ozvn0ut4rsn4d: jupyter completed 79ms
2018-04-21T21:42:47.926Z - info: node/services/browser-windows:: ipc cjg9wts1e003pzvn0m52gq4ih: jupyter completed 68ms
2018-04-21T21:42:47.952Z - info: node/services/browser-windows:: ipc cjg9wts2r003qzvn0psc0cnuv: jupyter completed 45ms
2018-04-21T21:42:47.983Z - info: node/services/browser-windows:: ipc cjg9wts3y003rzvn0r52y215u: jupyter completed 31ms
2018-04-21T21:42:48.030Z - info: node/services/browser-windows:: ipc cjg9wts5i003szvn0nevqcqab: jupyter completed 24ms
2018-04-21T21:42:48.080Z - info: node/services/browser-windows:: ipc cjg9wts6t003tzvn02pwphrwq: jupyter completed 27ms
2018-04-21T21:42:48.127Z - info: node/services/browser-windows:: ipc cjg9wts87003uzvn0glpawf78: jupyter completed 24ms
2018-04-21T21:42:48.185Z - info: node/services/browser-windows:: ipc cjg9wts9t003vzvn0ns1qc9vq: jupyter completed 24ms
2018-04-21T21:42:48.219Z - info: node/services/browser-windows:: ipc cjg9wtsb1003wzvn06b2d4x12: jupyter completed 13ms
2018-04-21T21:42:49.128Z - info: node/services/browser-windows:: ipc cjg9wtt0f003xzvn0nk00mjpd: jupyter completed 8ms
2018-04-21T21:42:49.646Z - info: node/services/browser-windows:: ipc cjg9wtteq003yzvn0a6cjovxj: jupyter completed 12ms
2018-04-21T21:42:49.757Z - info: node/services/browser-windows:: ipc cjg9wtthl003zzvn0miqq6i05: jupyter completed 20ms
2018-04-21T21:42:49.807Z - info: node/services/browser-windows:: ipc cjg9wttiv0040zvn0kip7e39s: jupyter completed 24ms
2018-04-21T21:42:49.998Z - info: node/services/browser-windows:: ipc cjg9wttog0041zvn039wfvm8s: jupyter completed 14ms
2018-04-21T21:42:50.052Z - info: node/services/browser-windows:: ipc cjg9wttpz0042zvn0d77b9cx6: jupyter completed 12ms
2018-04-21T21:42:50.189Z - info: node/services/browser-windows:: ipc cjg9wtttv0043zvn0enhoodde: jupyter completed 10ms
2018-04-21T21:42:50.312Z - info: node/services/browser-windows:: ipc cjg9wttx10044zvn02cst5oyv: jupyter completed 17ms
2018-04-21T21:42:50.327Z - info: node/services/browser-windows:: ipc cjg9wttx40045zvn0rxhnpz06: jupyter completed 31ms
2018-04-21T21:42:50.350Z - info: node/services/browser-windows:: ipc cjg9wtty00046zvn0qqet6uxr: getTabs completed 21ms
2018-04-21T21:42:50.412Z - info: node/services/browser-windows:: ipc cjg9wtu000048zvn0nemo9w9f: jupyter completed 11ms
2018-04-21T21:42:50.422Z - info: node/services/browser-windows:: ipc cjg9wtu030049zvn0axvucid8: jupyter completed 18ms
2018-04-21T21:42:50.475Z - info: node/services/browser-windows:: ipc cjg9wtu1q004azvn0bi93v51v: jupyter completed 12ms
2018-04-21T21:42:50.881Z - info: node/services/browser-windows:: ipc cjg9wtud2004bzvn0zitebndr: jupyter completed 11ms
2018-04-21T21:42:51.078Z - info: node/services/browser-windows:: ipc cjg9wtuin004czvn04watz28s: jupyter completed 7ms
2018-04-21T21:42:51.540Z - info: node/services/browser-windows:: ipc cjg9wtuve004ezvn0fjcmt35s: jupyter completed 9ms
2018-04-21T21:42:52.000Z - info: node/services/browser-windows:: ipc cjg9wtv7z004fzvn0negri1a0: jupyter completed 17ms
2018-04-21T21:42:52.864Z - info: node/services/browser-windows:: ipc cjg9wtvw0004gzvn0bd7ed5ep: jupyter completed 16ms
2018-04-21T21:42:53.013Z - info: node/services/browser-windows:: ipc cjg9wtw09004hzvn0yyq05qk7: jupyter completed 11ms
2018-04-21T21:42:53.150Z - info: node/services/browser-windows:: ipc cjg9wtw3v004izvn02ixhs3fn: jupyter completed 18ms
2018-04-21T21:42:53.169Z - info: node/services/browser-windows:: ipc cjg9wtw4c004jzvn01qta09g9: jupyter completed 20ms
2018-04-21T21:43:09.322Z - info: node/services/browser-windows:: ipc cjg9wu8kq004tzvn0pe94g0sh: getTabs completed 31ms
2018-04-21T21:43:09.383Z - info: node/services/browser-windows:: ipc cjg9wu8n0004vzvn0fskmg0is: jupyter completed 11ms
2018-04-21T21:43:09.394Z - info: node/services/browser-windows:: ipc cjg9wu8n0004wzvn0s4prqoqu: jupyter completed 22ms
2018-04-21T21:43:09.448Z - info: node/services/browser-windows:: ipc cjg9wu8oq004xzvn01lguqe9u: jupyter completed 14ms
2018-04-21T21:43:09.963Z - info: node/services/browser-windows:: ipc cjg9wu92z004yzvn04vdz6o45: jupyter completed 15ms
2018-04-21T21:43:10.067Z - info: node/services/browser-windows:: ipc cjg9wu95r004zzvn0uhvin971: jupyter completed 20ms
2018-04-21T21:43:10.257Z - info: node/services/browser-windows:: ipc cjg9wu9b90050zvn00d06yjqo: jupyter completed 11ms
2018-04-21T21:43:10.379Z - info: node/services/browser-windows:: ipc cjg9wu9eg0051zvn0mx448o26: jupyter completed 18ms
2018-04-21T21:43:10.402Z - info: node/services/browser-windows:: ipc cjg9wu9ej0052zvn0sb2prpoq: jupyter completed 39ms
2018-04-21T21:43:15.136Z - info: node/services/browser-windows:: ipc cjg9wud1y0055zvn0p6l3buwj: getTabs completed 41ms
2018-04-21T21:43:15.207Z - info: node/services/browser-windows:: ipc cjg9wud4s0057zvn0p7qejjw9: jupyter completed 10ms
2018-04-21T21:43:15.219Z - info: node/services/browser-windows:: ipc cjg9wud4u0058zvn06zp7p367: jupyter completed 21ms
2018-04-21T21:43:15.243Z - info: node/services/browser-windows:: ipc cjg9wud4v0059zvn0h73sjq2t: jupyter completed 44ms
2018-04-21T21:43:15.244Z - info: node/services/browser-windows:: ipc cjg9wud4v005azvn0365v8juy: jupyter completed 45ms
2018-04-21T21:43:16.183Z - info: node/services/browser-windows:: ipc cjg9wuduv005czvn0ua7zcjle: getTabs completed 48ms
2018-04-21T21:43:16.234Z - info: node/services/browser-windows:: ipc cjg9wudxb005ezvn0r37c93lu: jupyter completed 10ms
2018-04-21T21:43:16.240Z - info: node/services/browser-windows:: ipc cjg9wudxb005fzvn0475zu7zu: jupyter completed 17ms
2018-04-21T21:43:16.255Z - info: node/services/browser-windows:: ipc cjg9wudxc005gzvn0kdulu0kd: jupyter completed 31ms
2018-04-21T21:43:16.256Z - info: node/services/browser-windows:: ipc cjg9wudxe005hzvn0hldnmrif: jupyter completed 30ms
2018-04-21T21:43:28.434Z - info: node/services/browser-windows:: ipc cjg9wunb90062zvn0ozjhzoki: getTabs completed 45ms
2018-04-21T21:43:28.488Z - info: node/services/browser-windows:: ipc cjg9wundt0064zvn0l47e62nc: jupyter completed 7ms
2018-04-21T21:43:28.495Z - info: node/services/browser-windows:: ipc cjg9wundu0065zvn01fq0nnrg: jupyter completed 13ms
2018-04-21T21:43:28.531Z - info: node/services/browser-windows:: ipc cjg9wunel0066zvn0upn57107: jupyter completed 21ms
2018-04-21T21:43:28.537Z - info: node/services/browser-windows:: ipc cjg9wunel0067zvn0hy72y7cj: jupyter completed 28ms
2018-04-21T21:43:30.811Z - info: node/services/browser-windows:: ipc cjg9wup5l006azvn0wlqy3ap8: getTabs completed 34ms
2018-04-21T21:43:30.872Z - info: node/services/browser-windows:: ipc cjg9wup7r006czvn05a89v1dc: jupyter completed 17ms
2018-04-21T21:43:30.881Z - info: node/services/browser-windows:: ipc cjg9wup7r006dzvn0zk6cqub3: jupyter completed 26ms
2018-04-21T21:43:30.894Z - info: node/services/browser-windows:: ipc cjg9wup7r006ezvn0l8ciw29s: jupyter completed 39ms
2018-04-21T21:43:30.900Z - info: node/services/browser-windows:: ipc cjg9wup7s006fzvn068o6tfxz: jupyter completed 44ms
2018-04-21T21:43:46.484Z - info: node/services/browser-windows:: ipc cjg9wv18k0073zvn0thxf3acs: getTabs completed 47ms
2018-04-21T21:43:46.593Z - info: node/services/browser-windows:: ipc cjg9wv1cl0075zvn071yd3sj6: jupyter completed 12ms
2018-04-21T21:43:46.601Z - info: node/services/browser-windows:: ipc cjg9wv1co0076zvn004ctu4h4: jupyter completed 17ms
2018-04-21T21:43:46.616Z - info: node/services/browser-windows:: ipc cjg9wv1co0077zvn0nl8sc2c0: jupyter completed 32ms
2018-04-21T21:43:46.621Z - info: node/services/browser-windows:: ipc cjg9wv1co0078zvn0g6ty6g48: jupyter completed 37ms
2018-04-21T21:43:46.640Z - info: node/services/browser-windows:: ipc cjg9wv1co0079zvn00t8hlpo6: jupyter completed 56ms
2018-04-21T21:44:02.265Z - info: node/services/browser-windows:: ipc cjg9wvdfj007dzvn0539ub0qq: getTabs completed 26ms
2018-04-21T21:44:02.329Z - info: node/services/browser-windows:: ipc cjg9wvdht007fzvn0ypmt5p9w: jupyter completed 8ms
2018-04-21T21:44:02.341Z - info: node/services/browser-windows:: ipc cjg9wvdht007gzvn0e43a6lle: jupyter completed 20ms
2018-04-21T21:44:02.342Z - info: node/services/browser-windows:: ipc cjg9wvdht007hzvn064e9ppb6: jupyter completed 21ms
2018-04-21T21:44:02.358Z - info: node/services/browser-windows:: ipc cjg9wvdhu007izvn0mkkl76ut: jupyter completed 36ms
2018-04-21T21:44:02.643Z - info: node/services/browser-windows:: ipc cjg9wvdpq007kzvn0rnoi0p9z: getTabs completed 37ms
2018-04-21T21:44:02.687Z - info: node/services/browser-windows:: ipc cjg9wvdrn007mzvn0ebfo91w7: jupyter completed 11ms
2018-04-21T21:44:02.698Z - info: node/services/browser-windows:: ipc cjg9wvdrp007nzvn02rrqptzc: jupyter completed 21ms
2018-04-21T21:44:02.709Z - info: node/services/browser-windows:: ipc cjg9wvdrq007ozvn0tf9iow0f: jupyter completed 31ms
2018-04-21T21:44:02.716Z - info: node/services/browser-windows:: ipc cjg9wvdrq007pzvn06w4tpbzj: jupyter completed 37ms
2018-04-21T21:44:05.904Z - info: node/services/browser-windows:: ipc cjg9wvg850080zvn02pe2o3in: getTabs completed 42ms
2018-04-21T21:44:06.001Z - info: node/services/browser-windows:: ipc cjg9wvgbl0082zvn0fu5b6e82: jupyter completed 16ms
2018-04-21T21:44:06.009Z - info: node/services/browser-windows:: ipc cjg9wvgbm0083zvn03trcq1f3: jupyter completed 22ms
2018-04-21T21:44:06.195Z - info: node/index:: new plot served from http://localhost:9132/118321-3883-psxq9h.5hu16h6w29.png
2018-04-21T21:44:06.210Z - info: node/services/browser-windows:: ipc cjg9wvgh00084zvn0h4qvof55: jupyter completed 20ms
2018-04-21T21:44:06.218Z - info: node/services/browser-windows:: ipc cjg9wvghg0085zvn0s4idbyzl: jupyter completed 21ms
2018-04-21T21:44:06.242Z - info: node/services/plot-server:: sending file { filename: '/tmp/118321-3883-psxq9h.5hu16h6w29.png',
  route: '/118321-3883-psxq9h.5hu16h6w29.png',
  port: 9132 }
2018-04-21T21:44:06.246Z - info: node/services/browser-windows:: ipc cjg9wvghv0086zvn065rvv1y9: jupyter completed 35ms
2018-04-21T21:44:06.275Z - info: node/services/plot-server:: sending file
2018-04-21T21:44:52.997Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjg9wwgkj0088zvn05awa0zce',
  '2': { type: 'QUIT' },
  '3': 'mainWindow' }
2018-04-21T21:44:55.367Z - info: node/index:: onQuitApplication
2018-04-21T21:44:55.369Z - info: node/index:: stopping all file watchers
2018-04-21T21:44:55.376Z - info: node/index:: killing all children processes
2018-04-21T21:44:55.411Z - info: node/index:: python kernel process event cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-04-21T21:44:55.418Z - info: node/services/processes:: removed child process { pid: 4138,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python3',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/home/andy',
     env: 
      { 'BASH_FUNC_module%%': '() {  eval `/usr/bin/modulecmd bash $*`',
        'BASH_FUNC_scl%%': '() {  if [ "$1" ',
        CHROME_DESKTOP: 'Rodeo.desktop',
        CLICOLOR: 1,
        DBUS_SESSION_BUS_ADDRESS: 'unix:path',
        DESKTOP_SESSION: 'gnome',
        DISPLAY: ':0',
        GDMSESSION: 'gnome',
        GDM_LANG: 'en_US.UTF-8',
        GIO_LAUNCHED_DESKTOP_FILE: '/usr/share/applications/Rodeo.desktop',
        GIO_LAUNCHED_DESKTOP_FILE_PID: '3883',
        GJS_DEBUG_OUTPUT: 'stderr',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HISTCONTROL: 'ignoredups',
        HISTSIZE: '1000',
        HOME: '/home/andy',
        HOSTNAME: 'optimus',
        JOURNAL_STREAM: '9:34551',
        LANG: 'en_US.UTF-8',
        LESSOPEN: '||/usr/bin/lesspipe.sh %s',
        LOADEDMODULES: '',
        LOGNAME: 'andy',
        MAIL: '/var/spool/mail/andy',
        MODULEPATH: '/etc/scl/modulefiles:/etc/scl/modulefiles:/usr/share/Modules/modulefiles:/etc/modulefiles:/usr/share/modulefiles',
        MODULESHOME: '/usr/share/Modules',
        PATH: '/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/sbin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin:/home/andy/.local/bin:/home/andy/bin:/opt/mssql-tools/bin',
        PWD: '/home/andy',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        QTDIR: '/usr/lib64/qt-3.3',
        QTINC: '/usr/lib64/qt-3.3/include',
        QTLIB: '/usr/lib64/qt-3.3/lib',
        QT_IM_MODULE: 'ibus',
        SESSION_MANAGER: 'local/unix:@/tmp/.ICE-unix/1864,unix/unix:/tmp/.ICE-unix/1864',
        SHELL: '/bin/bash',
        SHLVL: '2',
        SSH_ASKPASS: '/usr/libexec/openssh/x11-ssh-askpass',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        USER: 'andy',
        USERNAME: 'andy',
        WAYLAND_DISPLAY: 'wayland-0',
        XDG_CURRENT_DESKTOP: 'GNOME',
        XDG_DATA_DIRS: '/home/andy/.local/share/flatpak/exports/share/:/var/lib/flatpak/exports/share/:/usr/local/share/:/usr/share/',
        XDG_MENU_PREFIX: 'gnome-',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XDG_SEAT: 'seat0',
        XDG_SESSION_DESKTOP: 'gnome',
        XDG_SESSION_ID: '2',
        XDG_SESSION_TYPE: 'wayland',
        XDG_VTNR: '2',
        XMODIFIERS: '@im',
        _: '/usr/bin/env' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-04-21T21:44:55.419Z - info: node/index:: python kernel process closed cjg9wrt000000zvn0oldl4kcw process 4138 { cmd: 'python3', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-04-21T21:44:55.423Z - info: node/index:: process 4138 successfully killed { code: null, signal: 'SIGTERM' }
2018-04-21T21:44:55.424Z - info: node/index:: quiting
2018-04-21T21:44:55.424Z - info: node/index:: before-quit
2018-04-21T21:44:55.424Z - info: node/services/browser-windows:: close mainWindow
2018-04-21T21:44:55.424Z - info: node/index:: forcing quit on linux
2018-04-21T21:44:55.435Z - info: node/index:: quit { errorCode: 0 }
2018-04-21T21:44:55.436Z - info: node/services/browser-windows:: destroyed
2018-04-21T21:44:55.436Z - info: node/services/browser-windows:: closed mainWindow
2018-04-21T21:44:55.436Z - info: node/services/ipc-promises:: did not reply to event because sender is destroyed 366 quitApplication
